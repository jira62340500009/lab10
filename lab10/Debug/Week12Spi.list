
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008450  08008450  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008458  08008458  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000020  08008480  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08008480  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c0e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f3  00000000  00000000  00030c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00032e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a8e  00000000  00000000  00034d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d7e  00000000  00000000  0004c79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b0e8  00000000  00000000  0005d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  000f8658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c84 	.word	0x08007c84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08007c84 	.word	0x08007c84

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_frsub>:
 8000b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b88:	e002      	b.n	8000b90 <__addsf3>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fsub>:
 8000b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b90 <__addsf3>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	bf1f      	itttt	ne
 8000b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b98:	ea92 0f03 	teqne	r2, r3
 8000b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba4:	d06a      	beq.n	8000c7c <__addsf3+0xec>
 8000ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bae:	bfc1      	itttt	gt
 8000bb0:	18d2      	addgt	r2, r2, r3
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	4048      	eorgt	r0, r1
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	bf88      	it	hi
 8000bc0:	4770      	bxhi	lr
 8000bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bde:	bf18      	it	ne
 8000be0:	4249      	negne	r1, r1
 8000be2:	ea92 0f03 	teq	r2, r3
 8000be6:	d03f      	beq.n	8000c68 <__addsf3+0xd8>
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf0:	eb10 000c 	adds.w	r0, r0, ip
 8000bf4:	f1c3 0320 	rsb	r3, r3, #32
 8000bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__addsf3+0x78>
 8000c02:	4249      	negs	r1, r1
 8000c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c0c:	d313      	bcc.n	8000c36 <__addsf3+0xa6>
 8000c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c12:	d306      	bcc.n	8000c22 <__addsf3+0x92>
 8000c14:	0840      	lsrs	r0, r0, #1
 8000c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1a:	f102 0201 	add.w	r2, r2, #1
 8000c1e:	2afe      	cmp	r2, #254	; 0xfe
 8000c20:	d251      	bcs.n	8000cc6 <__addsf3+0x136>
 8000c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	ea40 0003 	orr.w	r0, r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	0049      	lsls	r1, r1, #1
 8000c38:	eb40 0000 	adc.w	r0, r0, r0
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c44:	d2ed      	bcs.n	8000c22 <__addsf3+0x92>
 8000c46:	fab0 fc80 	clz	ip, r0
 8000c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c56:	bfaa      	itet	ge
 8000c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c5c:	4252      	neglt	r2, r2
 8000c5e:	4318      	orrge	r0, r3
 8000c60:	bfbc      	itt	lt
 8000c62:	40d0      	lsrlt	r0, r2
 8000c64:	4318      	orrlt	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	f092 0f00 	teq	r2, #0
 8000c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c70:	bf06      	itte	eq
 8000c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c76:	3201      	addeq	r2, #1
 8000c78:	3b01      	subne	r3, #1
 8000c7a:	e7b5      	b.n	8000be8 <__addsf3+0x58>
 8000c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	bf18      	it	ne
 8000c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8a:	d021      	beq.n	8000cd0 <__addsf3+0x140>
 8000c8c:	ea92 0f03 	teq	r2, r3
 8000c90:	d004      	beq.n	8000c9c <__addsf3+0x10c>
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	bf08      	it	eq
 8000c98:	4608      	moveq	r0, r1
 8000c9a:	4770      	bx	lr
 8000c9c:	ea90 0f01 	teq	r0, r1
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2000      	movne	r0, #0
 8000ca4:	4770      	bxne	lr
 8000ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000caa:	d104      	bne.n	8000cb6 <__addsf3+0x126>
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cba:	bf3c      	itt	cc
 8000cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc0:	4770      	bxcc	lr
 8000cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	4770      	bx	lr
 8000cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd4:	bf16      	itet	ne
 8000cd6:	4608      	movne	r0, r1
 8000cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cdc:	4601      	movne	r1, r0
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	bf06      	itte	eq
 8000ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce6:	ea90 0f01 	teqeq	r0, r1
 8000cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_ui2f>:
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e004      	b.n	8000d00 <__aeabi_i2f+0x8>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_i2f>:
 8000cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	bf48      	it	mi
 8000cfe:	4240      	negmi	r0, r0
 8000d00:	ea5f 0c00 	movs.w	ip, r0
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	e01c      	b.n	8000d4e <__aeabi_l2f+0x2a>

08000d14 <__aeabi_ul2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e00a      	b.n	8000d38 <__aeabi_l2f+0x14>
 8000d22:	bf00      	nop

08000d24 <__aeabi_l2f>:
 8000d24:	ea50 0201 	orrs.w	r2, r0, r1
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_l2f+0x14>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	ea5f 0c01 	movs.w	ip, r1
 8000d3c:	bf02      	ittt	eq
 8000d3e:	4684      	moveq	ip, r0
 8000d40:	4601      	moveq	r1, r0
 8000d42:	2000      	moveq	r0, #0
 8000d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d48:	bf08      	it	eq
 8000d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d52:	fabc f28c 	clz	r2, ip
 8000d56:	3a08      	subs	r2, #8
 8000d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d5c:	db10      	blt.n	8000d80 <__aeabi_l2f+0x5c>
 8000d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d62:	4463      	add	r3, ip
 8000d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	f020 0001 	biceq.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	f102 0220 	add.w	r2, r2, #32
 8000d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d90:	fa21 f202 	lsr.w	r2, r1, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_uldivmod>:
 8000da0:	b953      	cbnz	r3, 8000db8 <__aeabi_uldivmod+0x18>
 8000da2:	b94a      	cbnz	r2, 8000db8 <__aeabi_uldivmod+0x18>
 8000da4:	2900      	cmp	r1, #0
 8000da6:	bf08      	it	eq
 8000da8:	2800      	cmpeq	r0, #0
 8000daa:	bf1c      	itt	ne
 8000dac:	f04f 31ff 	movne.w	r1, #4294967295
 8000db0:	f04f 30ff 	movne.w	r0, #4294967295
 8000db4:	f000 b96e 	b.w	8001094 <__aeabi_idiv0>
 8000db8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc0:	f000 f806 	bl	8000dd0 <__udivmoddi4>
 8000dc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dcc:	b004      	add	sp, #16
 8000dce:	4770      	bx	lr

08000dd0 <__udivmoddi4>:
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	9d08      	ldr	r5, [sp, #32]
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	468c      	mov	ip, r1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8083 	bne.w	8000ee6 <__udivmoddi4+0x116>
 8000de0:	428a      	cmp	r2, r1
 8000de2:	4617      	mov	r7, r2
 8000de4:	d947      	bls.n	8000e76 <__udivmoddi4+0xa6>
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	b142      	cbz	r2, 8000dfe <__udivmoddi4+0x2e>
 8000dec:	f1c2 0020 	rsb	r0, r2, #32
 8000df0:	fa24 f000 	lsr.w	r0, r4, r0
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4097      	lsls	r7, r2
 8000df8:	ea40 0c01 	orr.w	ip, r0, r1
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e02:	0c23      	lsrs	r3, r4, #16
 8000e04:	fbbc f6f8 	udiv	r6, ip, r8
 8000e08:	fa1f fe87 	uxth.w	lr, r7
 8000e0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f10e 	mul.w	r1, r6, lr
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x60>
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e22:	f080 8119 	bcs.w	8001058 <__udivmoddi4+0x288>
 8000e26:	4299      	cmp	r1, r3
 8000e28:	f240 8116 	bls.w	8001058 <__udivmoddi4+0x288>
 8000e2c:	3e02      	subs	r6, #2
 8000e2e:	443b      	add	r3, r7
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3310 	mls	r3, r8, r0, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	45a6      	cmp	lr, r4
 8000e46:	d909      	bls.n	8000e5c <__udivmoddi4+0x8c>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	f080 8105 	bcs.w	800105c <__udivmoddi4+0x28c>
 8000e52:	45a6      	cmp	lr, r4
 8000e54:	f240 8102 	bls.w	800105c <__udivmoddi4+0x28c>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e60:	eba4 040e 	sub.w	r4, r4, lr
 8000e64:	2600      	movs	r6, #0
 8000e66:	b11d      	cbz	r5, 8000e70 <__udivmoddi4+0xa0>
 8000e68:	40d4      	lsrs	r4, r2
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e70:	4631      	mov	r1, r6
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	b902      	cbnz	r2, 8000e7a <__udivmoddi4+0xaa>
 8000e78:	deff      	udf	#255	; 0xff
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d150      	bne.n	8000f24 <__udivmoddi4+0x154>
 8000e82:	1bcb      	subs	r3, r1, r7
 8000e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e88:	fa1f f887 	uxth.w	r8, r7
 8000e8c:	2601      	movs	r6, #1
 8000e8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e92:	0c21      	lsrs	r1, r4, #16
 8000e94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d907      	bls.n	8000eb4 <__udivmoddi4+0xe4>
 8000ea4:	1879      	adds	r1, r7, r1
 8000ea6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0xe2>
 8000eac:	428b      	cmp	r3, r1
 8000eae:	f200 80e9 	bhi.w	8001084 <__udivmoddi4+0x2b4>
 8000eb2:	4684      	mov	ip, r0
 8000eb4:	1ac9      	subs	r1, r1, r3
 8000eb6:	b2a3      	uxth	r3, r4
 8000eb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ebc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ec4:	fb08 f800 	mul.w	r8, r8, r0
 8000ec8:	45a0      	cmp	r8, r4
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x10c>
 8000ecc:	193c      	adds	r4, r7, r4
 8000ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x10a>
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	f200 80d9 	bhi.w	800108c <__udivmoddi4+0x2bc>
 8000eda:	4618      	mov	r0, r3
 8000edc:	eba4 0408 	sub.w	r4, r4, r8
 8000ee0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ee4:	e7bf      	b.n	8000e66 <__udivmoddi4+0x96>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d909      	bls.n	8000efe <__udivmoddi4+0x12e>
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	f000 80b1 	beq.w	8001052 <__udivmoddi4+0x282>
 8000ef0:	2600      	movs	r6, #0
 8000ef2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	fab3 f683 	clz	r6, r3
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d14a      	bne.n	8000f9c <__udivmoddi4+0x1cc>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d302      	bcc.n	8000f10 <__udivmoddi4+0x140>
 8000f0a:	4282      	cmp	r2, r0
 8000f0c:	f200 80b8 	bhi.w	8001080 <__udivmoddi4+0x2b0>
 8000f10:	1a84      	subs	r4, r0, r2
 8000f12:	eb61 0103 	sbc.w	r1, r1, r3
 8000f16:	2001      	movs	r0, #1
 8000f18:	468c      	mov	ip, r1
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d0a8      	beq.n	8000e70 <__udivmoddi4+0xa0>
 8000f1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0xa0>
 8000f24:	f1c2 0320 	rsb	r3, r2, #32
 8000f28:	fa20 f603 	lsr.w	r6, r0, r3
 8000f2c:	4097      	lsls	r7, r2
 8000f2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	4330      	orrs	r0, r6
 8000f3a:	0c03      	lsrs	r3, r0, #16
 8000f3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f40:	fa1f f887 	uxth.w	r8, r7
 8000f44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4c:	fb06 f108 	mul.w	r1, r6, r8
 8000f50:	4299      	cmp	r1, r3
 8000f52:	fa04 f402 	lsl.w	r4, r4, r2
 8000f56:	d909      	bls.n	8000f6c <__udivmoddi4+0x19c>
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f5e:	f080 808d 	bcs.w	800107c <__udivmoddi4+0x2ac>
 8000f62:	4299      	cmp	r1, r3
 8000f64:	f240 808a 	bls.w	800107c <__udivmoddi4+0x2ac>
 8000f68:	3e02      	subs	r6, #2
 8000f6a:	443b      	add	r3, r7
 8000f6c:	1a5b      	subs	r3, r3, r1
 8000f6e:	b281      	uxth	r1, r0
 8000f70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7c:	fb00 f308 	mul.w	r3, r0, r8
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d907      	bls.n	8000f94 <__udivmoddi4+0x1c4>
 8000f84:	1879      	adds	r1, r7, r1
 8000f86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8a:	d273      	bcs.n	8001074 <__udivmoddi4+0x2a4>
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d971      	bls.n	8001074 <__udivmoddi4+0x2a4>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4439      	add	r1, r7
 8000f94:	1acb      	subs	r3, r1, r3
 8000f96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f9a:	e778      	b.n	8000e8e <__udivmoddi4+0xbe>
 8000f9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000fa0:	fa03 f406 	lsl.w	r4, r3, r6
 8000fa4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fa8:	431c      	orrs	r4, r3
 8000faa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fae:	fa01 f306 	lsl.w	r3, r1, r6
 8000fb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	0c3b      	lsrs	r3, r7, #16
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fa1f f884 	uxth.w	r8, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fce:	fb09 fa08 	mul.w	sl, r9, r8
 8000fd2:	458a      	cmp	sl, r1
 8000fd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000fd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x220>
 8000fde:	1861      	adds	r1, r4, r1
 8000fe0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fe4:	d248      	bcs.n	8001078 <__udivmoddi4+0x2a8>
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	d946      	bls.n	8001078 <__udivmoddi4+0x2a8>
 8000fea:	f1a9 0902 	sub.w	r9, r9, #2
 8000fee:	4421      	add	r1, r4
 8000ff0:	eba1 010a 	sub.w	r1, r1, sl
 8000ff4:	b2bf      	uxth	r7, r7
 8000ff6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ffa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ffe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001002:	fb00 f808 	mul.w	r8, r0, r8
 8001006:	45b8      	cmp	r8, r7
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x24a>
 800100a:	19e7      	adds	r7, r4, r7
 800100c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001010:	d22e      	bcs.n	8001070 <__udivmoddi4+0x2a0>
 8001012:	45b8      	cmp	r8, r7
 8001014:	d92c      	bls.n	8001070 <__udivmoddi4+0x2a0>
 8001016:	3802      	subs	r0, #2
 8001018:	4427      	add	r7, r4
 800101a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800101e:	eba7 0708 	sub.w	r7, r7, r8
 8001022:	fba0 8902 	umull	r8, r9, r0, r2
 8001026:	454f      	cmp	r7, r9
 8001028:	46c6      	mov	lr, r8
 800102a:	4649      	mov	r1, r9
 800102c:	d31a      	bcc.n	8001064 <__udivmoddi4+0x294>
 800102e:	d017      	beq.n	8001060 <__udivmoddi4+0x290>
 8001030:	b15d      	cbz	r5, 800104a <__udivmoddi4+0x27a>
 8001032:	ebb3 020e 	subs.w	r2, r3, lr
 8001036:	eb67 0701 	sbc.w	r7, r7, r1
 800103a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800103e:	40f2      	lsrs	r2, r6
 8001040:	ea4c 0202 	orr.w	r2, ip, r2
 8001044:	40f7      	lsrs	r7, r6
 8001046:	e9c5 2700 	strd	r2, r7, [r5]
 800104a:	2600      	movs	r6, #0
 800104c:	4631      	mov	r1, r6
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	462e      	mov	r6, r5
 8001054:	4628      	mov	r0, r5
 8001056:	e70b      	b.n	8000e70 <__udivmoddi4+0xa0>
 8001058:	4606      	mov	r6, r0
 800105a:	e6e9      	b.n	8000e30 <__udivmoddi4+0x60>
 800105c:	4618      	mov	r0, r3
 800105e:	e6fd      	b.n	8000e5c <__udivmoddi4+0x8c>
 8001060:	4543      	cmp	r3, r8
 8001062:	d2e5      	bcs.n	8001030 <__udivmoddi4+0x260>
 8001064:	ebb8 0e02 	subs.w	lr, r8, r2
 8001068:	eb69 0104 	sbc.w	r1, r9, r4
 800106c:	3801      	subs	r0, #1
 800106e:	e7df      	b.n	8001030 <__udivmoddi4+0x260>
 8001070:	4608      	mov	r0, r1
 8001072:	e7d2      	b.n	800101a <__udivmoddi4+0x24a>
 8001074:	4660      	mov	r0, ip
 8001076:	e78d      	b.n	8000f94 <__udivmoddi4+0x1c4>
 8001078:	4681      	mov	r9, r0
 800107a:	e7b9      	b.n	8000ff0 <__udivmoddi4+0x220>
 800107c:	4666      	mov	r6, ip
 800107e:	e775      	b.n	8000f6c <__udivmoddi4+0x19c>
 8001080:	4630      	mov	r0, r6
 8001082:	e74a      	b.n	8000f1a <__udivmoddi4+0x14a>
 8001084:	f1ac 0c02 	sub.w	ip, ip, #2
 8001088:	4439      	add	r1, r7
 800108a:	e713      	b.n	8000eb4 <__udivmoddi4+0xe4>
 800108c:	3802      	subs	r0, #2
 800108e:	443c      	add	r4, r7
 8001090:	e724      	b.n	8000edc <__udivmoddi4+0x10c>
 8001092:	bf00      	nop

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b0f4      	sub	sp, #464	; 0x1d0
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f002 f892 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f001 fb7c 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f001 fd26 	bl	8002af8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ac:	f001 fd04 	bl	8002ab8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010b0:	f001 fcd8 	bl	8002a64 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010b4:	f001 fc2e 	bl	8002914 <MX_SPI3_Init>
  MX_ADC1_Init();
 80010b8:	f001 fbda 	bl	8002870 <MX_ADC1_Init>
  MX_TIM3_Init();
 80010bc:	f001 fc62 	bl	8002984 <MX_TIM3_Init>
  MX_TIM11_Init();
 80010c0:	f001 fcac 	bl	8002a1c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80010c4:	48d6      	ldr	r0, [pc, #856]	; (8001420 <main+0x388>)
 80010c6:	f004 fd79 	bl	8005bbc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80010ca:	48d6      	ldr	r0, [pc, #856]	; (8001424 <main+0x38c>)
 80010cc:	f004 fdd0 	bl	8005c70 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	49d5      	ldr	r1, [pc, #852]	; (8001428 <main+0x390>)
 80010d4:	48d5      	ldr	r0, [pc, #852]	; (800142c <main+0x394>)
 80010d6:	f002 fa6d 	bl	80035b4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	48d3      	ldr	r0, [pc, #844]	; (8001430 <main+0x398>)
 80010e2:	f003 fce9 	bl	8004ab8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 32);
 80010e6:	2220      	movs	r2, #32
 80010e8:	49d2      	ldr	r1, [pc, #840]	; (8001434 <main+0x39c>)
 80010ea:	48d3      	ldr	r0, [pc, #844]	; (8001438 <main+0x3a0>)
 80010ec:	f005 fa91 	bl	8006612 <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 80010f0:	f001 fda2 	bl	8002c38 <UARTRecieveIT>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce

		static uint64_t timestamp = 0;
		if (wave_form == 1)
 80010fa:	4bd0      	ldr	r3, [pc, #832]	; (800143c <main+0x3a4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	f040 81c8 	bne.w	8001494 <main+0x3fc>
		{
			if (micros() - timestamp > 1000)
 8001104:	f001 fe22 	bl	8002d4c <micros>
 8001108:	4bcd      	ldr	r3, [pc, #820]	; (8001440 <main+0x3a8>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	ebb0 0a02 	subs.w	sl, r0, r2
 8001112:	eb61 0b03 	sbc.w	fp, r1, r3
 8001116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	455b      	cmp	r3, fp
 8001120:	bf08      	it	eq
 8001122:	4552      	cmpeq	r2, sl
 8001124:	f080 81b6 	bcs.w	8001494 <main+0x3fc>
			{
				timestamp = micros();
 8001128:	f001 fe10 	bl	8002d4c <micros>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	49c3      	ldr	r1, [pc, #780]	; (8001440 <main+0x3a8>)
 8001132:	e9c1 2300 	strd	r2, r3, [r1]
				if (my_slope == 1)
 8001136:	4bc3      	ldr	r3, [pc, #780]	; (8001444 <main+0x3ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	f040 80b0 	bne.w	80012a0 <main+0x208>
				{
					gen_wave = ((V_high-V_low)*4096/3.3)*(timestamp*Frequency/1000000)+(V_low*4096/3.3);
 8001140:	4bc1      	ldr	r3, [pc, #772]	; (8001448 <main+0x3b0>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	4bc1      	ldr	r3, [pc, #772]	; (800144c <main+0x3b4>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001450 <main+0x3b8>
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff f9a8 	bl	80004b0 <__aeabi_f2d>
 8001160:	a3ad      	add	r3, pc, #692	; (adr r3, 8001418 <main+0x380>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb25 	bl	80007b4 <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4614      	mov	r4, r2
 8001170:	461d      	mov	r5, r3
 8001172:	4bb3      	ldr	r3, [pc, #716]	; (8001440 <main+0x3a8>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fdca 	bl	8000d14 <__aeabi_ul2f>
 8001180:	ee07 0a10 	vmov	s14, r0
 8001184:	4bb3      	ldr	r3, [pc, #716]	; (8001454 <main+0x3bc>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001458 <main+0x3c0>
 8001192:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001196:	ee16 0a90 	vmov	r0, s13
 800119a:	f7ff f989 	bl	80004b0 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff f9db 	bl	8000560 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	4ba6      	ldr	r3, [pc, #664]	; (800144c <main+0x3b4>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001450 <main+0x3b8>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	ee17 0a90 	vmov	r0, s15
 80011c4:	f7ff f974 	bl	80004b0 <__aeabi_f2d>
 80011c8:	a393      	add	r3, pc, #588	; (adr r3, 8001418 <main+0x380>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff faf1 	bl	80007b4 <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff f80b 	bl	80001f4 <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc7d 	bl	8000ae4 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a9b      	ldr	r2, [pc, #620]	; (800145c <main+0x3c4>)
 80011ee:	6013      	str	r3, [r2, #0]
					dataOut = gen_wave;
 80011f0:	4b9a      	ldr	r3, [pc, #616]	; (800145c <main+0x3c4>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fa:	ee17 2a90 	vmov	r2, s15
 80011fe:	4b98      	ldr	r3, [pc, #608]	; (8001460 <main+0x3c8>)
 8001200:	601a      	str	r2, [r3, #0]
					Amplitude = (V_high-V_low)*4096/3.3;
 8001202:	4b91      	ldr	r3, [pc, #580]	; (8001448 <main+0x3b0>)
 8001204:	ed93 7a00 	vldr	s14, [r3]
 8001208:	4b90      	ldr	r3, [pc, #576]	; (800144c <main+0x3b4>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001450 <main+0x3b8>
 8001216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121a:	ee17 0a90 	vmov	r0, s15
 800121e:	f7ff f947 	bl	80004b0 <__aeabi_f2d>
 8001222:	a37d      	add	r3, pc, #500	; (adr r3, 8001418 <main+0x380>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fac4 	bl	80007b4 <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc2e 	bl	8000a94 <__aeabi_d2iz>
 8001238:	4603      	mov	r3, r0
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <main+0x3cc>)
 800123c:	6013      	str	r3, [r2, #0]
					dataOut %= Amplitude;
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <main+0x3c8>)
 8001240:	6819      	ldr	r1, [r3, #0]
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <main+0x3cc>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	fb91 f3f2 	sdiv	r3, r1, r2
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	4a83      	ldr	r2, [pc, #524]	; (8001460 <main+0x3c8>)
 8001252:	6013      	str	r3, [r2, #0]
					dataOut += (V_low*4096/3.3);
 8001254:	4b82      	ldr	r3, [pc, #520]	; (8001460 <main+0x3c8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f917 	bl	800048c <__aeabi_i2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	4b7a      	ldr	r3, [pc, #488]	; (800144c <main+0x3b4>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001450 <main+0x3b8>
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f91c 	bl	80004b0 <__aeabi_f2d>
 8001278:	a367      	add	r3, pc, #412	; (adr r3, 8001418 <main+0x380>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff fa99 	bl	80007b4 <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7fe ffb3 	bl	80001f4 <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbfd 	bl	8000a94 <__aeabi_d2iz>
 800129a:	4603      	mov	r3, r0
 800129c:	4a70      	ldr	r2, [pc, #448]	; (8001460 <main+0x3c8>)
 800129e:	6013      	str	r3, [r2, #0]
				}
				if (my_slope == -1)
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <main+0x3ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	f040 80b2 	bne.w	8001410 <main+0x378>
				{
					gen_wave = ((V_high-V_low)*4096/3.3)*(timestamp*Frequency/1000000)+(V_low*4096/3.3);
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <main+0x3b0>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <main+0x3b4>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001450 <main+0x3b8>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	ee17 0a90 	vmov	r0, s15
 80012c8:	f7ff f8f2 	bl	80004b0 <__aeabi_f2d>
 80012cc:	a352      	add	r3, pc, #328	; (adr r3, 8001418 <main+0x380>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff fa6f 	bl	80007b4 <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4614      	mov	r4, r2
 80012dc:	461d      	mov	r5, r3
 80012de:	4b58      	ldr	r3, [pc, #352]	; (8001440 <main+0x3a8>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fd14 	bl	8000d14 <__aeabi_ul2f>
 80012ec:	ee07 0a10 	vmov	s14, r0
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <main+0x3bc>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001458 <main+0x3c0>
 80012fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001302:	ee16 0a90 	vmov	r0, s13
 8001306:	f7ff f8d3 	bl	80004b0 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff f925 	bl	8000560 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4614      	mov	r4, r2
 800131c:	461d      	mov	r5, r3
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <main+0x3b4>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001450 <main+0x3b8>
 8001328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132c:	ee17 0a90 	vmov	r0, s15
 8001330:	f7ff f8be 	bl	80004b0 <__aeabi_f2d>
 8001334:	a338      	add	r3, pc, #224	; (adr r3, 8001418 <main+0x380>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa3b 	bl	80007b4 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ff55 	bl	80001f4 <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fbc7 	bl	8000ae4 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <main+0x3c4>)
 800135a:	6013      	str	r3, [r2, #0]
					dataOut = -gen_wave;
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <main+0x3c4>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eef1 7a67 	vneg.f32	s15, s15
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <main+0x3c8>)
 8001370:	601a      	str	r2, [r3, #0]
					Amplitude = (V_low-V_high)*4096/3.3;
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <main+0x3b4>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <main+0x3b0>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001450 <main+0x3b8>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	ee17 0a90 	vmov	r0, s15
 800138e:	f7ff f88f 	bl	80004b0 <__aeabi_f2d>
 8001392:	a321      	add	r3, pc, #132	; (adr r3, 8001418 <main+0x380>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff fa0c 	bl	80007b4 <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb76 	bl	8000a94 <__aeabi_d2iz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <main+0x3cc>)
 80013ac:	6013      	str	r3, [r2, #0]
					dataOut %= Amplitude;
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <main+0x3c8>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <main+0x3cc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	fb91 f3f2 	sdiv	r3, r1, r2
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <main+0x3c8>)
 80013c2:	6013      	str	r3, [r2, #0]
					dataOut += (V_high*4096/3.3);
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <main+0x3c8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f85f 	bl	800048c <__aeabi_i2d>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <main+0x3b0>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001450 <main+0x3b8>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f864 	bl	80004b0 <__aeabi_f2d>
 80013e8:	a30b      	add	r3, pc, #44	; (adr r3, 8001418 <main+0x380>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f9e1 	bl	80007b4 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4620      	mov	r0, r4
 80013f8:	4629      	mov	r1, r5
 80013fa:	f7fe fefb 	bl	80001f4 <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fb45 	bl	8000a94 <__aeabi_d2iz>
 800140a:	4603      	mov	r3, r0
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <main+0x3c8>)
 800140e:	6013      	str	r3, [r2, #0]
				}
				if (hspi3.State == HAL_SPI_STATE_READY
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <main+0x3d0>)
 8001412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001416:	e029      	b.n	800146c <main+0x3d4>
 8001418:	66666666 	.word	0x66666666
 800141c:	400a6666 	.word	0x400a6666
 8001420:	20000094 	.word	0x20000094
 8001424:	2000017c 	.word	0x2000017c
 8001428:	2000003c 	.word	0x2000003c
 800142c:	20000134 	.word	0x20000134
 8001430:	40020000 	.word	0x40020000
 8001434:	20000064 	.word	0x20000064
 8001438:	20000224 	.word	0x20000224
 800143c:	20000054 	.word	0x20000054
 8001440:	20000088 	.word	0x20000088
 8001444:	20000008 	.word	0x20000008
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000060 	.word	0x20000060
 8001450:	45800000 	.word	0x45800000
 8001454:	20000010 	.word	0x20000010
 8001458:	49742400 	.word	0x49742400
 800145c:	2000005c 	.word	0x2000005c
 8001460:	20000050 	.word	0x20000050
 8001464:	20000058 	.word	0x20000058
 8001468:	200000dc 	.word	0x200000dc
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d110      	bne.n	8001494 <main+0x3fc>
						&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001476:	48d2      	ldr	r0, [pc, #840]	; (80017c0 <main+0x728>)
 8001478:	f003 fb06 	bl	8004a88 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <main+0x3fc>
								== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 8001482:	4bd0      	ldr	r3, [pc, #832]	; (80017c4 <main+0x72c>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4bd0      	ldr	r3, [pc, #832]	; (80017c8 <main+0x730>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f001 fc02 	bl	8002c98 <MCP4922SetOutput>
				}
			}
		}
		if (wave_form == 2)
 8001494:	4bcd      	ldr	r3, [pc, #820]	; (80017cc <main+0x734>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	f040 80e9 	bne.w	8001670 <main+0x5d8>
		{
			if (micros() - timestamp > 1000)
 800149e:	f001 fc55 	bl	8002d4c <micros>
 80014a2:	4bcb      	ldr	r3, [pc, #812]	; (80017d0 <main+0x738>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	1a84      	subs	r4, r0, r2
 80014aa:	623c      	str	r4, [r7, #32]
 80014ac:	eb61 0303 	sbc.w	r3, r1, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014be:	428b      	cmp	r3, r1
 80014c0:	bf08      	it	eq
 80014c2:	4282      	cmpeq	r2, r0
 80014c4:	f080 80d4 	bcs.w	8001670 <main+0x5d8>
			{
				timestamp = micros();
 80014c8:	f001 fc40 	bl	8002d4c <micros>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	49bf      	ldr	r1, [pc, #764]	; (80017d0 <main+0x738>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
				gen_wave = ((V_high-V_low)*2048/3.3)*sinf(2*3.1416*timestamp*Frequency/1000000);
 80014d6:	4bbf      	ldr	r3, [pc, #764]	; (80017d4 <main+0x73c>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	4bbe      	ldr	r3, [pc, #760]	; (80017d8 <main+0x740>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80017dc <main+0x744>
 80014ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ee:	ee17 0a90 	vmov	r0, s15
 80014f2:	f7fe ffdd 	bl	80004b0 <__aeabi_f2d>
 80014f6:	a3ac      	add	r3, pc, #688	; (adr r3, 80017a8 <main+0x710>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f95a 	bl	80007b4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4690      	mov	r8, r2
 8001506:	4699      	mov	r9, r3
 8001508:	4bb1      	ldr	r3, [pc, #708]	; (80017d0 <main+0x738>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7fe ffef 	bl	80004f4 <__aeabi_ul2d>
 8001516:	a3a6      	add	r3, pc, #664	; (adr r3, 80017b0 <main+0x718>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f820 	bl	8000560 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4614      	mov	r4, r2
 8001526:	461d      	mov	r5, r3
 8001528:	4bad      	ldr	r3, [pc, #692]	; (80017e0 <main+0x748>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffbf 	bl	80004b0 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7ff f811 	bl	8000560 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	a39c      	add	r3, pc, #624	; (adr r3, 80017b8 <main+0x720>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f932 	bl	80007b4 <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fac4 	bl	8000ae4 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	ee00 3a10 	vmov	s0, r3
 8001562:	f005 fe23 	bl	80071ac <sinf>
 8001566:	ee10 3a10 	vmov	r3, s0
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffa0 	bl	80004b0 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4640      	mov	r0, r8
 8001576:	4649      	mov	r1, r9
 8001578:	f7fe fff2 	bl	8000560 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff faae 	bl	8000ae4 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	4a96      	ldr	r2, [pc, #600]	; (80017e4 <main+0x74c>)
 800158c:	6013      	str	r3, [r2, #0]
				float add_low = (2048+(V_low*2048/3.3));
 800158e:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <main+0x740>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80017dc <main+0x744>
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	ee17 0a90 	vmov	r0, s15
 80015a0:	f7fe ff86 	bl	80004b0 <__aeabi_f2d>
 80015a4:	a380      	add	r3, pc, #512	; (adr r3, 80017a8 <main+0x710>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f903 	bl	80007b4 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b8b      	ldr	r3, [pc, #556]	; (80017e8 <main+0x750>)
 80015bc:	f7fe fe1a 	bl	80001f4 <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fa8c 	bl	8000ae4 <__aeabi_d2f>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
				float add_high = ((3.3-V_high)*2048/3.3);
 80015d2:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <main+0x73c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff6a 	bl	80004b0 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	a171      	add	r1, pc, #452	; (adr r1, 80017a8 <main+0x710>)
 80015e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e6:	f7fe fe03 	bl	80001f0 <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <main+0x750>)
 80015f8:	f7fe ffb2 	bl	8000560 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	a368      	add	r3, pc, #416	; (adr r3, 80017a8 <main+0x710>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f8d3 	bl	80007b4 <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa65 	bl	8000ae4 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
				dataOut = gen_wave + add_low - add_high;
 8001620:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <main+0x74c>)
 8001622:	ed93 7a00 	vldr	s14, [r3]
 8001626:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 800162a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162e:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 8001632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163a:	ee17 2a90 	vmov	r2, s15
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <main+0x730>)
 8001640:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <main+0x754>)
 8001644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d110      	bne.n	8001670 <main+0x5d8>
										&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800164e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001652:	485b      	ldr	r0, [pc, #364]	; (80017c0 <main+0x728>)
 8001654:	f003 fa18 	bl	8004a88 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <main+0x5d8>
												== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <main+0x72c>)
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <main+0x730>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4619      	mov	r1, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f001 fb14 	bl	8002c98 <MCP4922SetOutput>
				}
			}
		}
		if (wave_form == 3)
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <main+0x734>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b03      	cmp	r3, #3
 8001676:	f040 80ef 	bne.w	8001858 <main+0x7c0>
		{
			if (micros() - timestamp > 1000)
 800167a:	f001 fb67 	bl	8002d4c <micros>
 800167e:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <main+0x738>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	1a84      	subs	r4, r0, r2
 8001686:	61bc      	str	r4, [r7, #24]
 8001688:	eb61 0303 	sbc.w	r3, r1, r3
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800169a:	428b      	cmp	r3, r1
 800169c:	bf08      	it	eq
 800169e:	4282      	cmpeq	r2, r0
 80016a0:	f080 80da 	bcs.w	8001858 <main+0x7c0>
			{
				time = duty_cycle*10000*Frequency;
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <main+0x758>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <main+0x748>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <main+0x75c>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
				if(micros() - timestamp < time)
 80016c8:	f001 fb40 	bl	8002d4c <micros>
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <main+0x738>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	1a84      	subs	r4, r0, r2
 80016d4:	613c      	str	r4, [r7, #16]
 80016d6:	eb61 0303 	sbc.w	r3, r1, r3
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e0:	f7ff fb18 	bl	8000d14 <__aeabi_ul2f>
 80016e4:	ee07 0a10 	vmov	s14, r0
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <main+0x75c>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d518      	bpl.n	800172a <main+0x692>
				{
					dataOut = V_high*4095/3.3;
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <main+0x73c>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80017f8 <main+0x760>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ee17 0a90 	vmov	r0, s15
 800170a:	f7fe fed1 	bl	80004b0 <__aeabi_f2d>
 800170e:	a326      	add	r3, pc, #152	; (adr r3, 80017a8 <main+0x710>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7ff f84e 	bl	80007b4 <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f9b8 	bl	8000a94 <__aeabi_d2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <main+0x730>)
 8001728:	6013      	str	r3, [r2, #0]
				}
				if(micros() - timestamp > time)
 800172a:	f001 fb0f 	bl	8002d4c <micros>
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <main+0x738>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	1a84      	subs	r4, r0, r2
 8001736:	60bc      	str	r4, [r7, #8]
 8001738:	eb61 0303 	sbc.w	r3, r1, r3
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001742:	f7ff fae7 	bl	8000d14 <__aeabi_ul2f>
 8001746:	ee07 0a10 	vmov	s14, r0
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <main+0x75c>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	dd18      	ble.n	800178c <main+0x6f4>
				{
					dataOut = V_low*4095/3.3;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <main+0x740>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80017f8 <main+0x760>
 8001764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001768:	ee17 0a90 	vmov	r0, s15
 800176c:	f7fe fea0 	bl	80004b0 <__aeabi_f2d>
 8001770:	a30d      	add	r3, pc, #52	; (adr r3, 80017a8 <main+0x710>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f81d 	bl	80007b4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f987 	bl	8000a94 <__aeabi_d2iz>
 8001786:	4603      	mov	r3, r0
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <main+0x730>)
 800178a:	6013      	str	r3, [r2, #0]
				}
				if(micros() - timestamp >= 1000000*Frequency)
 800178c:	f001 fade 	bl	8002d4c <micros>
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <main+0x738>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	1a84      	subs	r4, r0, r2
 8001798:	603c      	str	r4, [r7, #0]
 800179a:	eb61 0303 	sbc.w	r3, r1, r3
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a4:	e02a      	b.n	80017fc <main+0x764>
 80017a6:	bf00      	nop
 80017a8:	66666666 	.word	0x66666666
 80017ac:	400a6666 	.word	0x400a6666
 80017b0:	2e48e8a7 	.word	0x2e48e8a7
 80017b4:	401921ff 	.word	0x401921ff
 80017b8:	00000000 	.word	0x00000000
 80017bc:	412e8480 	.word	0x412e8480
 80017c0:	40020400 	.word	0x40020400
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000050 	.word	0x20000050
 80017cc:	20000054 	.word	0x20000054
 80017d0:	20000088 	.word	0x20000088
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000060 	.word	0x20000060
 80017dc:	45000000 	.word	0x45000000
 80017e0:	20000010 	.word	0x20000010
 80017e4:	2000005c 	.word	0x2000005c
 80017e8:	40a00000 	.word	0x40a00000
 80017ec:	200000dc 	.word	0x200000dc
 80017f0:	20000004 	.word	0x20000004
 80017f4:	2000004c 	.word	0x2000004c
 80017f8:	457ff000 	.word	0x457ff000
 80017fc:	f7ff fa8a 	bl	8000d14 <__aeabi_ul2f>
 8001800:	ee06 0a90 	vmov	s13, r0
 8001804:	4bd2      	ldr	r3, [pc, #840]	; (8001b50 <main+0xab8>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 8001b54 <main+0xabc>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	db06      	blt.n	800182a <main+0x792>
				{
					timestamp = micros();
 800181c:	f001 fa96 	bl	8002d4c <micros>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	49cc      	ldr	r1, [pc, #816]	; (8001b58 <main+0xac0>)
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (hspi3.State == HAL_SPI_STATE_READY
 800182a:	4bcc      	ldr	r3, [pc, #816]	; (8001b5c <main+0xac4>)
 800182c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d110      	bne.n	8001858 <main+0x7c0>
										&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183a:	48c9      	ldr	r0, [pc, #804]	; (8001b60 <main+0xac8>)
 800183c:	f003 f924 	bl	8004a88 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <main+0x7c0>
												== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 8001846:	4bc7      	ldr	r3, [pc, #796]	; (8001b64 <main+0xacc>)
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	4bc7      	ldr	r3, [pc, #796]	; (8001b68 <main+0xad0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f001 fa20 	bl	8002c98 <MCP4922SetOutput>
				}
			}
		}

		switch (State_change)
 8001858:	4bc4      	ldr	r3, [pc, #784]	; (8001b6c <main+0xad4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b28      	cmp	r3, #40	; 0x28
 800185e:	f63f ac42 	bhi.w	80010e6 <main+0x4e>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <main+0x7d0>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	0800190d 	.word	0x0800190d
 800186c:	080010e7 	.word	0x080010e7
 8001870:	080010e7 	.word	0x080010e7
 8001874:	080010e7 	.word	0x080010e7
 8001878:	080010e7 	.word	0x080010e7
 800187c:	080010e7 	.word	0x080010e7
 8001880:	080010e7 	.word	0x080010e7
 8001884:	080010e7 	.word	0x080010e7
 8001888:	080010e7 	.word	0x080010e7
 800188c:	080010e7 	.word	0x080010e7
 8001890:	08001945 	.word	0x08001945
 8001894:	08001a4d 	.word	0x08001a4d
 8001898:	080010e7 	.word	0x080010e7
 800189c:	080010e7 	.word	0x080010e7
 80018a0:	080010e7 	.word	0x080010e7
 80018a4:	080010e7 	.word	0x080010e7
 80018a8:	080010e7 	.word	0x080010e7
 80018ac:	080010e7 	.word	0x080010e7
 80018b0:	080010e7 	.word	0x080010e7
 80018b4:	080010e7 	.word	0x080010e7
 80018b8:	08001a13 	.word	0x08001a13
 80018bc:	08001ee1 	.word	0x08001ee1
 80018c0:	080010e7 	.word	0x080010e7
 80018c4:	080010e7 	.word	0x080010e7
 80018c8:	080010e7 	.word	0x080010e7
 80018cc:	080010e7 	.word	0x080010e7
 80018d0:	080010e7 	.word	0x080010e7
 80018d4:	080010e7 	.word	0x080010e7
 80018d8:	080010e7 	.word	0x080010e7
 80018dc:	080010e7 	.word	0x080010e7
 80018e0:	08001ea9 	.word	0x08001ea9
 80018e4:	080022fb 	.word	0x080022fb
 80018e8:	080010e7 	.word	0x080010e7
 80018ec:	080010e7 	.word	0x080010e7
 80018f0:	080010e7 	.word	0x080010e7
 80018f4:	080010e7 	.word	0x080010e7
 80018f8:	080010e7 	.word	0x080010e7
 80018fc:	080010e7 	.word	0x080010e7
 8001900:	080010e7 	.word	0x080010e7
 8001904:	080010e7 	.word	0x080010e7
 8001908:	080022c3 	.word	0x080022c3
		{
			case state_wait:
			{
				char temp[] =	"---------------------------\r\n"
 800190c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001910:	4a97      	ldr	r2, [pc, #604]	; (8001b70 <main+0xad8>)
 8001912:	4618      	mov	r0, r3
 8001914:	4611      	mov	r1, r2
 8001916:	2392      	movs	r3, #146	; 0x92
 8001918:	461a      	mov	r2, r3
 800191a:	f005 fc31 	bl	8007180 <memcpy>
								"| FUNCTION GENERATOR MENU |\r\n"
								"---------------------------\r\n"
								"[1] : Sawtooth Wave\r\n"
								"[2] : Sine Wave\r\n"
								"[3] : Square Wave\r\n\n";
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc58 	bl	80001d8 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	488f      	ldr	r0, [pc, #572]	; (8001b74 <main+0xadc>)
 8001936:	f004 fdda 	bl	80064ee <HAL_UART_Transmit>
				State_change = state_wait_input;
 800193a:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <main+0xad4>)
 800193c:	220a      	movs	r2, #10
 800193e:	601a      	str	r2, [r3, #0]
				break;
 8001940:	f000 bf0c 	b.w	800275c <main+0x16c4>
			}
			case state_wait_input:
				switch (inputchar)
 8001944:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8001948:	2b33      	cmp	r3, #51	; 0x33
 800194a:	d02e      	beq.n	80019aa <main+0x912>
 800194c:	2b33      	cmp	r3, #51	; 0x33
 800194e:	dc41      	bgt.n	80019d4 <main+0x93c>
 8001950:	2b32      	cmp	r3, #50	; 0x32
 8001952:	d018      	beq.n	8001986 <main+0x8ee>
 8001954:	2b32      	cmp	r3, #50	; 0x32
 8001956:	dc3d      	bgt.n	80019d4 <main+0x93c>
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d056      	beq.n	8001a0c <main+0x974>
 800195e:	2b31      	cmp	r3, #49	; 0x31
 8001960:	d138      	bne.n	80019d4 <main+0x93c>
				{
					case -1:
						break;
					case '1':
						wave_form = 1;
 8001962:	4b85      	ldr	r3, [pc, #532]	; (8001b78 <main+0xae0>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
						Frequency = 1;
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <main+0xab8>)
 800196a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800196e:	601a      	str	r2, [r3, #0]
						V_high = 3.3;
 8001970:	4b82      	ldr	r3, [pc, #520]	; (8001b7c <main+0xae4>)
 8001972:	4a83      	ldr	r2, [pc, #524]	; (8001b80 <main+0xae8>)
 8001974:	601a      	str	r2, [r3, #0]
						V_low = 0;
 8001976:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <main+0xaec>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
						State_change = state_menu_saw;
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <main+0xad4>)
 8001980:	2214      	movs	r2, #20
 8001982:	601a      	str	r2, [r3, #0]
						break;
 8001984:	e043      	b.n	8001a0e <main+0x976>
					case '2':
						wave_form = 2;
 8001986:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <main+0xae0>)
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
						Frequency = 1;
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <main+0xab8>)
 800198e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001992:	601a      	str	r2, [r3, #0]
						V_high = 3.3;
 8001994:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <main+0xae4>)
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <main+0xae8>)
 8001998:	601a      	str	r2, [r3, #0]
						V_low = 0;
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <main+0xaec>)
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
						State_change = state_menu_sin;
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <main+0xad4>)
 80019a4:	221e      	movs	r2, #30
 80019a6:	601a      	str	r2, [r3, #0]
						break;
 80019a8:	e031      	b.n	8001a0e <main+0x976>
					case '3':
						wave_form = 3;
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <main+0xae0>)
 80019ac:	2203      	movs	r2, #3
 80019ae:	601a      	str	r2, [r3, #0]
						Frequency = 1;
 80019b0:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <main+0xab8>)
 80019b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019b6:	601a      	str	r2, [r3, #0]
						V_high = 3.3;
 80019b8:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <main+0xae4>)
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <main+0xae8>)
 80019bc:	601a      	str	r2, [r3, #0]
						V_low = 0;
 80019be:	4b71      	ldr	r3, [pc, #452]	; (8001b84 <main+0xaec>)
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
						duty_cycle = 50;
 80019c6:	4b70      	ldr	r3, [pc, #448]	; (8001b88 <main+0xaf0>)
 80019c8:	2232      	movs	r2, #50	; 0x32
 80019ca:	601a      	str	r2, [r3, #0]
						State_change = state_menu_sq;
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <main+0xad4>)
 80019ce:	2228      	movs	r2, #40	; 0x28
 80019d0:	601a      	str	r2, [r3, #0]
						break;
 80019d2:	e01c      	b.n	8001a0e <main+0x976>
					default:
					{
						char temp[] = 	"/// Wrong Information ///\r\n\n";
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <main+0xaf4>)
 80019d6:	f507 75d2 	add.w	r5, r7, #420	; 0x1a4
 80019da:	461c      	mov	r4, r3
 80019dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019e4:	c507      	stmia	r5!, {r0, r1, r2}
 80019e6:	702b      	strb	r3, [r5, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80019e8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fbf3 	bl	80001d8 <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	485d      	ldr	r0, [pc, #372]	; (8001b74 <main+0xadc>)
 8001a00:	f004 fd75 	bl	80064ee <HAL_UART_Transmit>
						State_change = state_wait;
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <main+0xad4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
						break;
 8001a0a:	e000      	b.n	8001a0e <main+0x976>
						break;
 8001a0c:	bf00      	nop
					}
				}
				break;
 8001a0e:	f000 bea5 	b.w	800275c <main+0x16c4>
			case state_menu_saw:
			{
				char temp[] = 	"------------------------\r\n"
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <main+0xaf8>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001a20:	461a      	mov	r2, r3
 8001a22:	f005 fbad 	bl	8007180 <memcpy>
								"[4] : V_high -0.1 V\r\n"
								"[5] : V_low +0.1 V\r\n"
								"[6] : V_low -0.1 V\r\n"
								"[7] : Slope Up/Down\r\n"
								"[x] : Back to main menu\r\n\n";
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fbd4 	bl	80001d8 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3c:	484d      	ldr	r0, [pc, #308]	; (8001b74 <main+0xadc>)
 8001a3e:	f004 fd56 	bl	80064ee <HAL_UART_Transmit>
				State_change = state_menu_saw_wait;
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <main+0xad4>)
 8001a44:	220b      	movs	r2, #11
 8001a46:	601a      	str	r2, [r3, #0]
				break;
 8001a48:	f000 be88 	b.w	800275c <main+0x16c4>
			}
			case state_menu_saw_wait:
				switch (inputchar)
 8001a4c:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8001a50:	2b37      	cmp	r3, #55	; 0x37
 8001a52:	f300 809f 	bgt.w	8001b94 <main+0xafc>
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	f2c0 8203 	blt.w	8001e64 <main+0xdcc>
 8001a5e:	3301      	adds	r3, #1
 8001a60:	2b38      	cmp	r3, #56	; 0x38
 8001a62:	f200 81ff 	bhi.w	8001e64 <main+0xdcc>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <main+0x9d4>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001e9d 	.word	0x08001e9d
 8001a70:	08001e65 	.word	0x08001e65
 8001a74:	08001e65 	.word	0x08001e65
 8001a78:	08001e65 	.word	0x08001e65
 8001a7c:	08001e65 	.word	0x08001e65
 8001a80:	08001e65 	.word	0x08001e65
 8001a84:	08001e65 	.word	0x08001e65
 8001a88:	08001e65 	.word	0x08001e65
 8001a8c:	08001e65 	.word	0x08001e65
 8001a90:	08001e65 	.word	0x08001e65
 8001a94:	08001e65 	.word	0x08001e65
 8001a98:	08001e65 	.word	0x08001e65
 8001a9c:	08001e65 	.word	0x08001e65
 8001aa0:	08001e65 	.word	0x08001e65
 8001aa4:	08001e65 	.word	0x08001e65
 8001aa8:	08001e65 	.word	0x08001e65
 8001aac:	08001e65 	.word	0x08001e65
 8001ab0:	08001e65 	.word	0x08001e65
 8001ab4:	08001e65 	.word	0x08001e65
 8001ab8:	08001e65 	.word	0x08001e65
 8001abc:	08001e65 	.word	0x08001e65
 8001ac0:	08001e65 	.word	0x08001e65
 8001ac4:	08001e65 	.word	0x08001e65
 8001ac8:	08001e65 	.word	0x08001e65
 8001acc:	08001e65 	.word	0x08001e65
 8001ad0:	08001e65 	.word	0x08001e65
 8001ad4:	08001e65 	.word	0x08001e65
 8001ad8:	08001e65 	.word	0x08001e65
 8001adc:	08001e65 	.word	0x08001e65
 8001ae0:	08001e65 	.word	0x08001e65
 8001ae4:	08001e65 	.word	0x08001e65
 8001ae8:	08001e65 	.word	0x08001e65
 8001aec:	08001e65 	.word	0x08001e65
 8001af0:	08001e65 	.word	0x08001e65
 8001af4:	08001e65 	.word	0x08001e65
 8001af8:	08001e65 	.word	0x08001e65
 8001afc:	08001e65 	.word	0x08001e65
 8001b00:	08001e65 	.word	0x08001e65
 8001b04:	08001e65 	.word	0x08001e65
 8001b08:	08001e65 	.word	0x08001e65
 8001b0c:	08001e65 	.word	0x08001e65
 8001b10:	08001e65 	.word	0x08001e65
 8001b14:	08001e65 	.word	0x08001e65
 8001b18:	08001e65 	.word	0x08001e65
 8001b1c:	08001e65 	.word	0x08001e65
 8001b20:	08001e65 	.word	0x08001e65
 8001b24:	08001e65 	.word	0x08001e65
 8001b28:	08001e65 	.word	0x08001e65
 8001b2c:	08001e65 	.word	0x08001e65
 8001b30:	08001e65 	.word	0x08001e65
 8001b34:	08001b9d 	.word	0x08001b9d
 8001b38:	08001be1 	.word	0x08001be1
 8001b3c:	08001c23 	.word	0x08001c23
 8001b40:	08001c6d 	.word	0x08001c6d
 8001b44:	08001d13 	.word	0x08001d13
 8001b48:	08001db7 	.word	0x08001db7
 8001b4c:	08001df9 	.word	0x08001df9
 8001b50:	20000010 	.word	0x20000010
 8001b54:	49742400 	.word	0x49742400
 8001b58:	20000088 	.word	0x20000088
 8001b5c:	200000dc 	.word	0x200000dc
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000050 	.word	0x20000050
 8001b6c:	20000048 	.word	0x20000048
 8001b70:	08007c9c 	.word	0x08007c9c
 8001b74:	20000224 	.word	0x20000224
 8001b78:	20000054 	.word	0x20000054
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	40533333 	.word	0x40533333
 8001b84:	20000060 	.word	0x20000060
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	08007d30 	.word	0x08007d30
 8001b90:	08007d50 	.word	0x08007d50
 8001b94:	2b78      	cmp	r3, #120	; 0x78
 8001b96:	f000 8141 	beq.w	8001e1c <main+0xd84>
 8001b9a:	e163      	b.n	8001e64 <main+0xdcc>
				{
					case -1:
						break;
					case '1':
						Frequency += 0.1;
 8001b9c:	4ba8      	ldr	r3, [pc, #672]	; (8001e40 <main+0xda8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fc85 	bl	80004b0 <__aeabi_f2d>
 8001ba6:	a3a0      	add	r3, pc, #640	; (adr r3, 8001e28 <main+0xd90>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fb22 	bl	80001f4 <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ff94 	bl	8000ae4 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4aa0      	ldr	r2, [pc, #640]	; (8001e40 <main+0xda8>)
 8001bc0:	6013      	str	r3, [r2, #0]
						if(Frequency >= 10)
 8001bc2:	4b9f      	ldr	r3, [pc, #636]	; (8001e40 <main+0xda8>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	da00      	bge.n	8001bd8 <main+0xb40>
						{
							Frequency = 10;
						}
						break;
 8001bd6:	e165      	b.n	8001ea4 <main+0xe0c>
							Frequency = 10;
 8001bd8:	4b99      	ldr	r3, [pc, #612]	; (8001e40 <main+0xda8>)
 8001bda:	4a9a      	ldr	r2, [pc, #616]	; (8001e44 <main+0xdac>)
 8001bdc:	601a      	str	r2, [r3, #0]
						break;
 8001bde:	e161      	b.n	8001ea4 <main+0xe0c>
					case '2':
						Frequency -= 0.1;
 8001be0:	4b97      	ldr	r3, [pc, #604]	; (8001e40 <main+0xda8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc63 	bl	80004b0 <__aeabi_f2d>
 8001bea:	a38f      	add	r3, pc, #572	; (adr r3, 8001e28 <main+0xd90>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fafe 	bl	80001f0 <__aeabi_dsub>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe ff72 	bl	8000ae4 <__aeabi_d2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a8f      	ldr	r2, [pc, #572]	; (8001e40 <main+0xda8>)
 8001c04:	6013      	str	r3, [r2, #0]
						if(Frequency <= 0)
 8001c06:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <main+0xda8>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d900      	bls.n	8001c18 <main+0xb80>
						{
							Frequency = 0;
						}
						break;
 8001c16:	e145      	b.n	8001ea4 <main+0xe0c>
							Frequency = 0;
 8001c18:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <main+0xda8>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
						break;
 8001c20:	e140      	b.n	8001ea4 <main+0xe0c>
					case '3':
						V_high += 0.1;
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <main+0xdb0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc42 	bl	80004b0 <__aeabi_f2d>
 8001c2c:	a37e      	add	r3, pc, #504	; (adr r3, 8001e28 <main+0xd90>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fadf 	bl	80001f4 <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ff51 	bl	8000ae4 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <main+0xdb0>)
 8001c46:	6013      	str	r3, [r2, #0]
						if(V_high >= 3.3)
 8001c48:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <main+0xdb0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc2f 	bl	80004b0 <__aeabi_f2d>
 8001c52:	a377      	add	r3, pc, #476	; (adr r3, 8001e30 <main+0xd98>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe ff08 	bl	8000a6c <__aeabi_dcmpge>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d100      	bne.n	8001c64 <main+0xbcc>
						{
							V_high = 3.3;
						}
						break;
 8001c62:	e11f      	b.n	8001ea4 <main+0xe0c>
							V_high = 3.3;
 8001c64:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <main+0xdb0>)
 8001c66:	4a79      	ldr	r2, [pc, #484]	; (8001e4c <main+0xdb4>)
 8001c68:	601a      	str	r2, [r3, #0]
						break;
 8001c6a:	e11b      	b.n	8001ea4 <main+0xe0c>
					case '4':
						V_high -= 0.1;
 8001c6c:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <main+0xdb0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc1d 	bl	80004b0 <__aeabi_f2d>
 8001c76:	a36c      	add	r3, pc, #432	; (adr r3, 8001e28 <main+0xd90>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fab8 	bl	80001f0 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff2c 	bl	8000ae4 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <main+0xdb0>)
 8001c90:	6013      	str	r3, [r2, #0]
						if(V_high <= 0.1)
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <main+0xdb0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc0a 	bl	80004b0 <__aeabi_f2d>
 8001c9c:	a362      	add	r3, pc, #392	; (adr r3, 8001e28 <main+0xd90>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fed9 	bl	8000a58 <__aeabi_dcmple>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <main+0xc1c>
						{
							V_high = 0.1;
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <main+0xdb0>)
 8001cae:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <main+0xdb8>)
 8001cb0:	601a      	str	r2, [r3, #0]
						}
						else if(V_high <= V_low + 0.1)
						{
							V_high = V_high + 0.1;
						}
						break;
 8001cb2:	e0f7      	b.n	8001ea4 <main+0xe0c>
						else if(V_high <= V_low + 0.1)
 8001cb4:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <main+0xdb0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbf9 	bl	80004b0 <__aeabi_f2d>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	460d      	mov	r5, r1
 8001cc2:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <main+0xdbc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbf2 	bl	80004b0 <__aeabi_f2d>
 8001ccc:	a356      	add	r3, pc, #344	; (adr r3, 8001e28 <main+0xd90>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fa8f 	bl	80001f4 <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe febb 	bl	8000a58 <__aeabi_dcmple>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <main+0xc52>
						break;
 8001ce8:	e0dc      	b.n	8001ea4 <main+0xe0c>
							V_high = V_high + 0.1;
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <main+0xdb0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbde 	bl	80004b0 <__aeabi_f2d>
 8001cf4:	a34c      	add	r3, pc, #304	; (adr r3, 8001e28 <main+0xd90>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fa7b 	bl	80001f4 <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe feed 	bl	8000ae4 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	; (8001e48 <main+0xdb0>)
 8001d0e:	6013      	str	r3, [r2, #0]
						break;
 8001d10:	e0c8      	b.n	8001ea4 <main+0xe0c>
					case '5':
						V_low += 0.1;
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <main+0xdbc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fbca 	bl	80004b0 <__aeabi_f2d>
 8001d1c:	a342      	add	r3, pc, #264	; (adr r3, 8001e28 <main+0xd90>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fa67 	bl	80001f4 <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fed9 	bl	8000ae4 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <main+0xdbc>)
 8001d36:	6013      	str	r3, [r2, #0]
						if(V_low >= 3.2)
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <main+0xdbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbb7 	bl	80004b0 <__aeabi_f2d>
 8001d42:	a33d      	add	r3, pc, #244	; (adr r3, 8001e38 <main+0xda0>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fe90 	bl	8000a6c <__aeabi_dcmpge>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <main+0xcc0>
						{
							V_low = 3.2;
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <main+0xdbc>)
 8001d54:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <main+0xdc0>)
 8001d56:	601a      	str	r2, [r3, #0]
						}
						if(V_low >= V_high - 0.1)
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <main+0xdbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fba7 	bl	80004b0 <__aeabi_f2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <main+0xdb0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fba0 	bl	80004b0 <__aeabi_f2d>
 8001d70:	a32d      	add	r3, pc, #180	; (adr r3, 8001e28 <main+0xd90>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fa3b 	bl	80001f0 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4620      	mov	r0, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	f7fe fe73 	bl	8000a6c <__aeabi_dcmpge>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <main+0xcf6>
						{
							V_low = V_low - 0.1;
						}
						break;
 8001d8c:	e08a      	b.n	8001ea4 <main+0xe0c>
							V_low = V_low - 0.1;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <main+0xdbc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb8c 	bl	80004b0 <__aeabi_f2d>
 8001d98:	a323      	add	r3, pc, #140	; (adr r3, 8001e28 <main+0xd90>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fa27 	bl	80001f0 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe fe9b 	bl	8000ae4 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <main+0xdbc>)
 8001db2:	6013      	str	r3, [r2, #0]
						break;
 8001db4:	e076      	b.n	8001ea4 <main+0xe0c>
					case '6':
						V_low -= 0.1;
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <main+0xdbc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fb78 	bl	80004b0 <__aeabi_f2d>
 8001dc0:	a319      	add	r3, pc, #100	; (adr r3, 8001e28 <main+0xd90>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fa13 	bl	80001f0 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fe87 	bl	8000ae4 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <main+0xdbc>)
 8001dda:	6013      	str	r3, [r2, #0]
						if(V_low <= 0)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <main+0xdbc>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d900      	bls.n	8001dee <main+0xd56>
						{
							V_low = 0;
						}
						break;
 8001dec:	e05a      	b.n	8001ea4 <main+0xe0c>
							V_low = 0;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <main+0xdbc>)
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
						break;
 8001df6:	e055      	b.n	8001ea4 <main+0xe0c>
					case '7':
						if (my_slope == 1)
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <main+0xdc4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d104      	bne.n	8001e0a <main+0xd72>
						{
							my_slope =-1;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <main+0xdc4>)
 8001e02:	f04f 32ff 	mov.w	r2, #4294967295
 8001e06:	601a      	str	r2, [r3, #0]
							break;
 8001e08:	e04c      	b.n	8001ea4 <main+0xe0c>
						}
						if (my_slope == -1)
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <main+0xdc4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d146      	bne.n	8001ea2 <main+0xe0a>
						{
							my_slope = 1;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <main+0xdc4>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
							break;
 8001e1a:	e043      	b.n	8001ea4 <main+0xe0c>
						}
						break;
					case 'x':
						State_change = state_wait;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <main+0xdc8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
						break;
 8001e22:	e03f      	b.n	8001ea4 <main+0xe0c>
 8001e24:	f3af 8000 	nop.w
 8001e28:	9999999a 	.word	0x9999999a
 8001e2c:	3fb99999 	.word	0x3fb99999
 8001e30:	66666666 	.word	0x66666666
 8001e34:	400a6666 	.word	0x400a6666
 8001e38:	9999999a 	.word	0x9999999a
 8001e3c:	40099999 	.word	0x40099999
 8001e40:	20000010 	.word	0x20000010
 8001e44:	41200000 	.word	0x41200000
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	40533333 	.word	0x40533333
 8001e50:	3dcccccd 	.word	0x3dcccccd
 8001e54:	20000060 	.word	0x20000060
 8001e58:	404ccccd 	.word	0x404ccccd
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000048 	.word	0x20000048
					default:
					{
						char temp[] = 	"/// Wrong Information ///\r\n\n";
 8001e64:	4bc2      	ldr	r3, [pc, #776]	; (8002170 <main+0x10d8>)
 8001e66:	f507 75c2 	add.w	r5, r7, #388	; 0x184
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e74:	c507      	stmia	r5!, {r0, r1, r2}
 8001e76:	702b      	strb	r3, [r5, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001e78:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f9ab 	bl	80001d8 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	48b9      	ldr	r0, [pc, #740]	; (8002174 <main+0x10dc>)
 8001e90:	f004 fb2d 	bl	80064ee <HAL_UART_Transmit>
						State_change = state_menu_saw;
 8001e94:	4bb8      	ldr	r3, [pc, #736]	; (8002178 <main+0x10e0>)
 8001e96:	2214      	movs	r2, #20
 8001e98:	601a      	str	r2, [r3, #0]
						break;
 8001e9a:	e003      	b.n	8001ea4 <main+0xe0c>
						break;
 8001e9c:	bf00      	nop
 8001e9e:	f000 bc5d 	b.w	800275c <main+0x16c4>
						break;
 8001ea2:	bf00      	nop
					}
				}
				break;
 8001ea4:	f000 bc5a 	b.w	800275c <main+0x16c4>
			case state_menu_sin:
			{
				char temp[] = 	"------------------------\r\n"
 8001ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eac:	4ab3      	ldr	r2, [pc, #716]	; (800217c <main+0x10e4>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	23ed      	movs	r3, #237	; 0xed
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f005 f963 	bl	8007180 <memcpy>
								"[3] : V_high +0.1 V\r\n"
								"[4] : V_high -0.1 V\r\n"
								"[5] : V_low +0.1 V\r\n"
								"[6] : V_low -0.1 V\r\n"
								"[x] : Back to main menu\r\n\n";
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f98a 	bl	80001d8 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed0:	48a8      	ldr	r0, [pc, #672]	; (8002174 <main+0x10dc>)
 8001ed2:	f004 fb0c 	bl	80064ee <HAL_UART_Transmit>
				State_change = state_menu_sin_wait;
 8001ed6:	4ba8      	ldr	r3, [pc, #672]	; (8002178 <main+0x10e0>)
 8001ed8:	2215      	movs	r2, #21
 8001eda:	601a      	str	r2, [r3, #0]
				break;
 8001edc:	f000 bc3e 	b.w	800275c <main+0x16c4>
			}
			case state_menu_sin_wait:
				switch (inputchar)
 8001ee0:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8001ee4:	2b36      	cmp	r3, #54	; 0x36
 8001ee6:	dc7b      	bgt.n	8001fe0 <main+0xf48>
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	f2c0 81cb 	blt.w	8002286 <main+0x11ee>
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	2b37      	cmp	r3, #55	; 0x37
 8001ef4:	f200 81c7 	bhi.w	8002286 <main+0x11ee>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <main+0xe68>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	080022bf 	.word	0x080022bf
 8001f04:	08002287 	.word	0x08002287
 8001f08:	08002287 	.word	0x08002287
 8001f0c:	08002287 	.word	0x08002287
 8001f10:	08002287 	.word	0x08002287
 8001f14:	08002287 	.word	0x08002287
 8001f18:	08002287 	.word	0x08002287
 8001f1c:	08002287 	.word	0x08002287
 8001f20:	08002287 	.word	0x08002287
 8001f24:	08002287 	.word	0x08002287
 8001f28:	08002287 	.word	0x08002287
 8001f2c:	08002287 	.word	0x08002287
 8001f30:	08002287 	.word	0x08002287
 8001f34:	08002287 	.word	0x08002287
 8001f38:	08002287 	.word	0x08002287
 8001f3c:	08002287 	.word	0x08002287
 8001f40:	08002287 	.word	0x08002287
 8001f44:	08002287 	.word	0x08002287
 8001f48:	08002287 	.word	0x08002287
 8001f4c:	08002287 	.word	0x08002287
 8001f50:	08002287 	.word	0x08002287
 8001f54:	08002287 	.word	0x08002287
 8001f58:	08002287 	.word	0x08002287
 8001f5c:	08002287 	.word	0x08002287
 8001f60:	08002287 	.word	0x08002287
 8001f64:	08002287 	.word	0x08002287
 8001f68:	08002287 	.word	0x08002287
 8001f6c:	08002287 	.word	0x08002287
 8001f70:	08002287 	.word	0x08002287
 8001f74:	08002287 	.word	0x08002287
 8001f78:	08002287 	.word	0x08002287
 8001f7c:	08002287 	.word	0x08002287
 8001f80:	08002287 	.word	0x08002287
 8001f84:	08002287 	.word	0x08002287
 8001f88:	08002287 	.word	0x08002287
 8001f8c:	08002287 	.word	0x08002287
 8001f90:	08002287 	.word	0x08002287
 8001f94:	08002287 	.word	0x08002287
 8001f98:	08002287 	.word	0x08002287
 8001f9c:	08002287 	.word	0x08002287
 8001fa0:	08002287 	.word	0x08002287
 8001fa4:	08002287 	.word	0x08002287
 8001fa8:	08002287 	.word	0x08002287
 8001fac:	08002287 	.word	0x08002287
 8001fb0:	08002287 	.word	0x08002287
 8001fb4:	08002287 	.word	0x08002287
 8001fb8:	08002287 	.word	0x08002287
 8001fbc:	08002287 	.word	0x08002287
 8001fc0:	08002287 	.word	0x08002287
 8001fc4:	08002287 	.word	0x08002287
 8001fc8:	08001fe9 	.word	0x08001fe9
 8001fcc:	0800202d 	.word	0x0800202d
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	080020b9 	.word	0x080020b9
 8001fd8:	08002199 	.word	0x08002199
 8001fdc:	0800223d 	.word	0x0800223d
 8001fe0:	2b78      	cmp	r3, #120	; 0x78
 8001fe2:	f000 814c 	beq.w	800227e <main+0x11e6>
 8001fe6:	e14e      	b.n	8002286 <main+0x11ee>
				{
					case -1:
						break;
					case '1':
						Frequency += 0.1;
 8001fe8:	4b65      	ldr	r3, [pc, #404]	; (8002180 <main+0x10e8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa5f 	bl	80004b0 <__aeabi_f2d>
 8001ff2:	a35b      	add	r3, pc, #364	; (adr r3, 8002160 <main+0x10c8>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe f8fc 	bl	80001f4 <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fd6e 	bl	8000ae4 <__aeabi_d2f>
 8002008:	4603      	mov	r3, r0
 800200a:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <main+0x10e8>)
 800200c:	6013      	str	r3, [r2, #0]
						if(Frequency >= 10)
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <main+0x10e8>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	da00      	bge.n	8002024 <main+0xf8c>
						{
							Frequency = 10;
						}
						break;
 8002022:	e14d      	b.n	80022c0 <main+0x1228>
							Frequency = 10;
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <main+0x10e8>)
 8002026:	4a57      	ldr	r2, [pc, #348]	; (8002184 <main+0x10ec>)
 8002028:	601a      	str	r2, [r3, #0]
						break;
 800202a:	e149      	b.n	80022c0 <main+0x1228>
					case '2':
						Frequency -= 0.1;
 800202c:	4b54      	ldr	r3, [pc, #336]	; (8002180 <main+0x10e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa3d 	bl	80004b0 <__aeabi_f2d>
 8002036:	a34a      	add	r3, pc, #296	; (adr r3, 8002160 <main+0x10c8>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe f8d8 	bl	80001f0 <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7fe fd4c 	bl	8000ae4 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <main+0x10e8>)
 8002050:	6013      	str	r3, [r2, #0]
						if(Frequency <= 0)
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <main+0x10e8>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d900      	bls.n	8002064 <main+0xfcc>
						{
							Frequency = 0;
						}
						break;
 8002062:	e12d      	b.n	80022c0 <main+0x1228>
							Frequency = 0;
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <main+0x10e8>)
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
						break;
 800206c:	e128      	b.n	80022c0 <main+0x1228>
					case '3':
						V_high += 0.1;
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <main+0x10f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa1c 	bl	80004b0 <__aeabi_f2d>
 8002078:	a339      	add	r3, pc, #228	; (adr r3, 8002160 <main+0x10c8>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe f8b9 	bl	80001f4 <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fd2b 	bl	8000ae4 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	4a3d      	ldr	r2, [pc, #244]	; (8002188 <main+0x10f0>)
 8002092:	6013      	str	r3, [r2, #0]
						if(V_high >= 3.3)
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <main+0x10f0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa09 	bl	80004b0 <__aeabi_f2d>
 800209e:	a332      	add	r3, pc, #200	; (adr r3, 8002168 <main+0x10d0>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fce2 	bl	8000a6c <__aeabi_dcmpge>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d100      	bne.n	80020b0 <main+0x1018>
						{
							V_high = 3.3;
						}
						break;
 80020ae:	e107      	b.n	80022c0 <main+0x1228>
							V_high = 3.3;
 80020b0:	4b35      	ldr	r3, [pc, #212]	; (8002188 <main+0x10f0>)
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <main+0x10f4>)
 80020b4:	601a      	str	r2, [r3, #0]
						break;
 80020b6:	e103      	b.n	80022c0 <main+0x1228>
					case '4':
						V_high -= 0.1;
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <main+0x10f0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f9f7 	bl	80004b0 <__aeabi_f2d>
 80020c2:	a327      	add	r3, pc, #156	; (adr r3, 8002160 <main+0x10c8>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe f892 	bl	80001f0 <__aeabi_dsub>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fd06 	bl	8000ae4 <__aeabi_d2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <main+0x10f0>)
 80020dc:	6013      	str	r3, [r2, #0]
						if(V_high <= 0.1)
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <main+0x10f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f9e4 	bl	80004b0 <__aeabi_f2d>
 80020e8:	a31d      	add	r3, pc, #116	; (adr r3, 8002160 <main+0x10c8>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fcb3 	bl	8000a58 <__aeabi_dcmple>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <main+0x1068>
						{
							V_high = 0.1;
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <main+0x10f0>)
 80020fa:	4a25      	ldr	r2, [pc, #148]	; (8002190 <main+0x10f8>)
 80020fc:	601a      	str	r2, [r3, #0]
						}
						else if(V_high <= V_low + 0.1)
						{
							V_high = V_high + 0.1;
						}
						break;
 80020fe:	e0df      	b.n	80022c0 <main+0x1228>
						else if(V_high <= V_low + 0.1)
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <main+0x10f0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9d3 	bl	80004b0 <__aeabi_f2d>
 800210a:	4604      	mov	r4, r0
 800210c:	460d      	mov	r5, r1
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <main+0x10fc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9cc 	bl	80004b0 <__aeabi_f2d>
 8002118:	a311      	add	r3, pc, #68	; (adr r3, 8002160 <main+0x10c8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f869 	bl	80001f4 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fc95 	bl	8000a58 <__aeabi_dcmple>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <main+0x109e>
						break;
 8002134:	e0c4      	b.n	80022c0 <main+0x1228>
							V_high = V_high + 0.1;
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <main+0x10f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9b8 	bl	80004b0 <__aeabi_f2d>
 8002140:	a307      	add	r3, pc, #28	; (adr r3, 8002160 <main+0x10c8>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f855 	bl	80001f4 <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fcc7 	bl	8000ae4 <__aeabi_d2f>
 8002156:	4603      	mov	r3, r0
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <main+0x10f0>)
 800215a:	6013      	str	r3, [r2, #0]
						break;
 800215c:	e0b0      	b.n	80022c0 <main+0x1228>
 800215e:	bf00      	nop
 8002160:	9999999a 	.word	0x9999999a
 8002164:	3fb99999 	.word	0x3fb99999
 8002168:	66666666 	.word	0x66666666
 800216c:	400a6666 	.word	0x400a6666
 8002170:	08007d30 	.word	0x08007d30
 8002174:	20000224 	.word	0x20000224
 8002178:	20000048 	.word	0x20000048
 800217c:	08007e54 	.word	0x08007e54
 8002180:	20000010 	.word	0x20000010
 8002184:	41200000 	.word	0x41200000
 8002188:	2000000c 	.word	0x2000000c
 800218c:	40533333 	.word	0x40533333
 8002190:	3dcccccd 	.word	0x3dcccccd
 8002194:	20000060 	.word	0x20000060
					case '5':
						V_low += 0.1;
 8002198:	4bcf      	ldr	r3, [pc, #828]	; (80024d8 <main+0x1440>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f987 	bl	80004b0 <__aeabi_f2d>
 80021a2:	a3c9      	add	r3, pc, #804	; (adr r3, 80024c8 <main+0x1430>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f824 	bl	80001f4 <__adddf3>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fc96 	bl	8000ae4 <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4ac7      	ldr	r2, [pc, #796]	; (80024d8 <main+0x1440>)
 80021bc:	6013      	str	r3, [r2, #0]
						if(V_low >= 3.2)
 80021be:	4bc6      	ldr	r3, [pc, #792]	; (80024d8 <main+0x1440>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f974 	bl	80004b0 <__aeabi_f2d>
 80021c8:	a3c1      	add	r3, pc, #772	; (adr r3, 80024d0 <main+0x1438>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fc4d 	bl	8000a6c <__aeabi_dcmpge>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <main+0x1146>
						{
							V_low = 3.2;
 80021d8:	4bbf      	ldr	r3, [pc, #764]	; (80024d8 <main+0x1440>)
 80021da:	4ac0      	ldr	r2, [pc, #768]	; (80024dc <main+0x1444>)
 80021dc:	601a      	str	r2, [r3, #0]
						}
						if(V_low >= V_high - 0.1)
 80021de:	4bbe      	ldr	r3, [pc, #760]	; (80024d8 <main+0x1440>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f964 	bl	80004b0 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4bbc      	ldr	r3, [pc, #752]	; (80024e0 <main+0x1448>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f95d 	bl	80004b0 <__aeabi_f2d>
 80021f6:	a3b4      	add	r3, pc, #720	; (adr r3, 80024c8 <main+0x1430>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fd fff8 	bl	80001f0 <__aeabi_dsub>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fc30 	bl	8000a6c <__aeabi_dcmpge>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d100      	bne.n	8002214 <main+0x117c>
						{
							V_low = V_low - 0.1;
						}
						break;
 8002212:	e055      	b.n	80022c0 <main+0x1228>
							V_low = V_low - 0.1;
 8002214:	4bb0      	ldr	r3, [pc, #704]	; (80024d8 <main+0x1440>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f949 	bl	80004b0 <__aeabi_f2d>
 800221e:	a3aa      	add	r3, pc, #680	; (adr r3, 80024c8 <main+0x1430>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fd ffe4 	bl	80001f0 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fc58 	bl	8000ae4 <__aeabi_d2f>
 8002234:	4603      	mov	r3, r0
 8002236:	4aa8      	ldr	r2, [pc, #672]	; (80024d8 <main+0x1440>)
 8002238:	6013      	str	r3, [r2, #0]
						break;
 800223a:	e041      	b.n	80022c0 <main+0x1228>
					case '6':
						V_low -= 0.1;
 800223c:	4ba6      	ldr	r3, [pc, #664]	; (80024d8 <main+0x1440>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f935 	bl	80004b0 <__aeabi_f2d>
 8002246:	a3a0      	add	r3, pc, #640	; (adr r3, 80024c8 <main+0x1430>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fd ffd0 	bl	80001f0 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fc44 	bl	8000ae4 <__aeabi_d2f>
 800225c:	4603      	mov	r3, r0
 800225e:	4a9e      	ldr	r2, [pc, #632]	; (80024d8 <main+0x1440>)
 8002260:	6013      	str	r3, [r2, #0]
						if(V_low <= 0)
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <main+0x1440>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	d900      	bls.n	8002274 <main+0x11dc>
						{
							V_low = 0;
						}
						break;
 8002272:	e025      	b.n	80022c0 <main+0x1228>
							V_low = 0;
 8002274:	4b98      	ldr	r3, [pc, #608]	; (80024d8 <main+0x1440>)
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
						break;
 800227c:	e020      	b.n	80022c0 <main+0x1228>
					case 'x':
						State_change = state_wait;
 800227e:	4b99      	ldr	r3, [pc, #612]	; (80024e4 <main+0x144c>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
						break;
 8002284:	e01c      	b.n	80022c0 <main+0x1228>
					default:
					{
						char temp[] = 	"/// Wrong Information ///\r\n\n";
 8002286:	4b98      	ldr	r3, [pc, #608]	; (80024e8 <main+0x1450>)
 8002288:	f507 75b2 	add.w	r5, r7, #356	; 0x164
 800228c:	461c      	mov	r4, r3
 800228e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002296:	c507      	stmia	r5!, {r0, r1, r2}
 8002298:	702b      	strb	r3, [r5, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 800229a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fd ff9a 	bl	80001d8 <strlen>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 80022ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b0:	488e      	ldr	r0, [pc, #568]	; (80024ec <main+0x1454>)
 80022b2:	f004 f91c 	bl	80064ee <HAL_UART_Transmit>
						State_change = state_menu_sin;
 80022b6:	4b8b      	ldr	r3, [pc, #556]	; (80024e4 <main+0x144c>)
 80022b8:	221e      	movs	r2, #30
 80022ba:	601a      	str	r2, [r3, #0]
						break;
 80022bc:	e000      	b.n	80022c0 <main+0x1228>
						break;
 80022be:	bf00      	nop
					}
				}
				break;
 80022c0:	e24c      	b.n	800275c <main+0x16c4>
			case state_menu_sq:
			{
				char temp[] = 	"------------------------\r\n"
 80022c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c6:	4a8a      	ldr	r2, [pc, #552]	; (80024f0 <main+0x1458>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	4611      	mov	r1, r2
 80022cc:	f240 131b 	movw	r3, #283	; 0x11b
 80022d0:	461a      	mov	r2, r3
 80022d2:	f004 ff55 	bl	8007180 <memcpy>
								"[5] : V_low +0.1 V\r\n"
								"[6] : V_low -0.1 V\r\n"
								"[7] : Duty_cycle +10\r\n"
								"[8] : Duty_cycle -10\r\n"
								"[x] : Back to main menu\r\n\n";
				HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 80022d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fd ff7c 	bl	80001d8 <strlen>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ec:	487f      	ldr	r0, [pc, #508]	; (80024ec <main+0x1454>)
 80022ee:	f004 f8fe 	bl	80064ee <HAL_UART_Transmit>
				State_change = state_menu_sq_wait;
 80022f2:	4b7c      	ldr	r3, [pc, #496]	; (80024e4 <main+0x144c>)
 80022f4:	221f      	movs	r2, #31
 80022f6:	601a      	str	r2, [r3, #0]
				break;
 80022f8:	e230      	b.n	800275c <main+0x16c4>
			}
			case state_menu_sq_wait:
				switch (inputchar)
 80022fa:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	f000 8225 	beq.w	8002750 <main+0x16b8>
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	f2c0 8205 	blt.w	8002718 <main+0x1680>
 800230e:	2b78      	cmp	r3, #120	; 0x78
 8002310:	f300 8202 	bgt.w	8002718 <main+0x1680>
 8002314:	2b31      	cmp	r3, #49	; 0x31
 8002316:	f2c0 81ff 	blt.w	8002718 <main+0x1680>
 800231a:	3b31      	subs	r3, #49	; 0x31
 800231c:	2b47      	cmp	r3, #71	; 0x47
 800231e:	f200 81fb 	bhi.w	8002718 <main+0x1680>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <main+0x1290>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002449 	.word	0x08002449
 800232c:	0800248d 	.word	0x0800248d
 8002330:	08002507 	.word	0x08002507
 8002334:	08002551 	.word	0x08002551
 8002338:	080025f7 	.word	0x080025f7
 800233c:	0800269b 	.word	0x0800269b
 8002340:	080026dd 	.word	0x080026dd
 8002344:	080026f7 	.word	0x080026f7
 8002348:	08002719 	.word	0x08002719
 800234c:	08002719 	.word	0x08002719
 8002350:	08002719 	.word	0x08002719
 8002354:	08002719 	.word	0x08002719
 8002358:	08002719 	.word	0x08002719
 800235c:	08002719 	.word	0x08002719
 8002360:	08002719 	.word	0x08002719
 8002364:	08002719 	.word	0x08002719
 8002368:	08002719 	.word	0x08002719
 800236c:	08002719 	.word	0x08002719
 8002370:	08002719 	.word	0x08002719
 8002374:	08002719 	.word	0x08002719
 8002378:	08002719 	.word	0x08002719
 800237c:	08002719 	.word	0x08002719
 8002380:	08002719 	.word	0x08002719
 8002384:	08002719 	.word	0x08002719
 8002388:	08002719 	.word	0x08002719
 800238c:	08002719 	.word	0x08002719
 8002390:	08002719 	.word	0x08002719
 8002394:	08002719 	.word	0x08002719
 8002398:	08002719 	.word	0x08002719
 800239c:	08002719 	.word	0x08002719
 80023a0:	08002719 	.word	0x08002719
 80023a4:	08002719 	.word	0x08002719
 80023a8:	08002719 	.word	0x08002719
 80023ac:	08002719 	.word	0x08002719
 80023b0:	08002719 	.word	0x08002719
 80023b4:	08002719 	.word	0x08002719
 80023b8:	08002719 	.word	0x08002719
 80023bc:	08002719 	.word	0x08002719
 80023c0:	08002719 	.word	0x08002719
 80023c4:	08002719 	.word	0x08002719
 80023c8:	08002719 	.word	0x08002719
 80023cc:	08002719 	.word	0x08002719
 80023d0:	08002719 	.word	0x08002719
 80023d4:	08002719 	.word	0x08002719
 80023d8:	08002719 	.word	0x08002719
 80023dc:	08002719 	.word	0x08002719
 80023e0:	08002719 	.word	0x08002719
 80023e4:	08002719 	.word	0x08002719
 80023e8:	08002719 	.word	0x08002719
 80023ec:	08002719 	.word	0x08002719
 80023f0:	08002719 	.word	0x08002719
 80023f4:	08002719 	.word	0x08002719
 80023f8:	08002719 	.word	0x08002719
 80023fc:	08002719 	.word	0x08002719
 8002400:	08002719 	.word	0x08002719
 8002404:	08002719 	.word	0x08002719
 8002408:	08002719 	.word	0x08002719
 800240c:	08002719 	.word	0x08002719
 8002410:	08002719 	.word	0x08002719
 8002414:	08002719 	.word	0x08002719
 8002418:	08002719 	.word	0x08002719
 800241c:	08002719 	.word	0x08002719
 8002420:	08002719 	.word	0x08002719
 8002424:	08002719 	.word	0x08002719
 8002428:	08002719 	.word	0x08002719
 800242c:	08002719 	.word	0x08002719
 8002430:	08002719 	.word	0x08002719
 8002434:	08002719 	.word	0x08002719
 8002438:	08002719 	.word	0x08002719
 800243c:	08002719 	.word	0x08002719
 8002440:	08002719 	.word	0x08002719
 8002444:	08002711 	.word	0x08002711
				{
					case -1:
						break;
					case '1':
						Frequency += 0.1;
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <main+0x145c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f82f 	bl	80004b0 <__aeabi_f2d>
 8002452:	a31d      	add	r3, pc, #116	; (adr r3, 80024c8 <main+0x1430>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fd fecc 	bl	80001f4 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb3e 	bl	8000ae4 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <main+0x145c>)
 800246c:	6013      	str	r3, [r2, #0]
						if(Frequency >= 10)
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <main+0x145c>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	da00      	bge.n	8002484 <main+0x13ec>
						{
							Frequency = 10;
						}
						break;
 8002482:	e16a      	b.n	800275a <main+0x16c2>
							Frequency = 10;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <main+0x145c>)
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <main+0x1460>)
 8002488:	601a      	str	r2, [r3, #0]
						break;
 800248a:	e166      	b.n	800275a <main+0x16c2>
					case '2':
						Frequency -= 0.1;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <main+0x145c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f80d 	bl	80004b0 <__aeabi_f2d>
 8002496:	a30c      	add	r3, pc, #48	; (adr r3, 80024c8 <main+0x1430>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fd fea8 	bl	80001f0 <__aeabi_dsub>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fb1c 	bl	8000ae4 <__aeabi_d2f>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <main+0x145c>)
 80024b0:	6013      	str	r3, [r2, #0]
						if(Frequency <= 0)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <main+0x145c>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d91c      	bls.n	80024fc <main+0x1464>
						{
							Frequency = 0;
						}
						break;
 80024c2:	e14a      	b.n	800275a <main+0x16c2>
 80024c4:	f3af 8000 	nop.w
 80024c8:	9999999a 	.word	0x9999999a
 80024cc:	3fb99999 	.word	0x3fb99999
 80024d0:	9999999a 	.word	0x9999999a
 80024d4:	40099999 	.word	0x40099999
 80024d8:	20000060 	.word	0x20000060
 80024dc:	404ccccd 	.word	0x404ccccd
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000048 	.word	0x20000048
 80024e8:	08007d30 	.word	0x08007d30
 80024ec:	20000224 	.word	0x20000224
 80024f0:	08007f44 	.word	0x08007f44
 80024f4:	20000010 	.word	0x20000010
 80024f8:	41200000 	.word	0x41200000
							Frequency = 0;
 80024fc:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <main+0x16e0>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
						break;
 8002504:	e129      	b.n	800275a <main+0x16c2>
					case '3':
						V_high += 0.1;
 8002506:	4b9d      	ldr	r3, [pc, #628]	; (800277c <main+0x16e4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ffd0 	bl	80004b0 <__aeabi_f2d>
 8002510:	a393      	add	r3, pc, #588	; (adr r3, 8002760 <main+0x16c8>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fd fe6d 	bl	80001f4 <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fadf 	bl	8000ae4 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	4a94      	ldr	r2, [pc, #592]	; (800277c <main+0x16e4>)
 800252a:	6013      	str	r3, [r2, #0]
						if(V_high >= 3.3)
 800252c:	4b93      	ldr	r3, [pc, #588]	; (800277c <main+0x16e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ffbd 	bl	80004b0 <__aeabi_f2d>
 8002536:	a38c      	add	r3, pc, #560	; (adr r3, 8002768 <main+0x16d0>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe fa96 	bl	8000a6c <__aeabi_dcmpge>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d100      	bne.n	8002548 <main+0x14b0>
						{
							V_high = 3.3;
						}
						break;
 8002546:	e108      	b.n	800275a <main+0x16c2>
							V_high = 3.3;
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <main+0x16e4>)
 800254a:	4a8d      	ldr	r2, [pc, #564]	; (8002780 <main+0x16e8>)
 800254c:	601a      	str	r2, [r3, #0]
						break;
 800254e:	e104      	b.n	800275a <main+0x16c2>
					case '4':
						V_high -= 0.1;
 8002550:	4b8a      	ldr	r3, [pc, #552]	; (800277c <main+0x16e4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffab 	bl	80004b0 <__aeabi_f2d>
 800255a:	a381      	add	r3, pc, #516	; (adr r3, 8002760 <main+0x16c8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fe46 	bl	80001f0 <__aeabi_dsub>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe faba 	bl	8000ae4 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	4a82      	ldr	r2, [pc, #520]	; (800277c <main+0x16e4>)
 8002574:	6013      	str	r3, [r2, #0]
						if(V_high <= 0.1)
 8002576:	4b81      	ldr	r3, [pc, #516]	; (800277c <main+0x16e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd ff98 	bl	80004b0 <__aeabi_f2d>
 8002580:	a377      	add	r3, pc, #476	; (adr r3, 8002760 <main+0x16c8>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe fa67 	bl	8000a58 <__aeabi_dcmple>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <main+0x1500>
						{
							V_high = 0.1;
 8002590:	4b7a      	ldr	r3, [pc, #488]	; (800277c <main+0x16e4>)
 8002592:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <main+0x16ec>)
 8002594:	601a      	str	r2, [r3, #0]
						}
						else if(V_high <= V_low + 0.1)
						{
							V_high = V_high + 0.1;
						}
						break;
 8002596:	e0e0      	b.n	800275a <main+0x16c2>
						else if(V_high <= V_low + 0.1)
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <main+0x16e4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff87 	bl	80004b0 <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4b78      	ldr	r3, [pc, #480]	; (8002788 <main+0x16f0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff80 	bl	80004b0 <__aeabi_f2d>
 80025b0:	a36b      	add	r3, pc, #428	; (adr r3, 8002760 <main+0x16c8>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd fe1d 	bl	80001f4 <__adddf3>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fe fa49 	bl	8000a58 <__aeabi_dcmple>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <main+0x1536>
						break;
 80025cc:	e0c5      	b.n	800275a <main+0x16c2>
							V_high = V_high + 0.1;
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <main+0x16e4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff6c 	bl	80004b0 <__aeabi_f2d>
 80025d8:	a361      	add	r3, pc, #388	; (adr r3, 8002760 <main+0x16c8>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd fe09 	bl	80001f4 <__adddf3>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fa7b 	bl	8000ae4 <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a62      	ldr	r2, [pc, #392]	; (800277c <main+0x16e4>)
 80025f2:	6013      	str	r3, [r2, #0]
						break;
 80025f4:	e0b1      	b.n	800275a <main+0x16c2>
					case '5':
						V_low += 0.1;
 80025f6:	4b64      	ldr	r3, [pc, #400]	; (8002788 <main+0x16f0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ff58 	bl	80004b0 <__aeabi_f2d>
 8002600:	a357      	add	r3, pc, #348	; (adr r3, 8002760 <main+0x16c8>)
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f7fd fdf5 	bl	80001f4 <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fa67 	bl	8000ae4 <__aeabi_d2f>
 8002616:	4603      	mov	r3, r0
 8002618:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <main+0x16f0>)
 800261a:	6013      	str	r3, [r2, #0]
						if(V_low >= 3.2)
 800261c:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <main+0x16f0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff45 	bl	80004b0 <__aeabi_f2d>
 8002626:	a352      	add	r3, pc, #328	; (adr r3, 8002770 <main+0x16d8>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe fa1e 	bl	8000a6c <__aeabi_dcmpge>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <main+0x15a4>
						{
							V_low = 3.2;
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <main+0x16f0>)
 8002638:	4a54      	ldr	r2, [pc, #336]	; (800278c <main+0x16f4>)
 800263a:	601a      	str	r2, [r3, #0]
						}
						if(V_low >= V_high - 0.1)
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <main+0x16f0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff35 	bl	80004b0 <__aeabi_f2d>
 8002646:	4604      	mov	r4, r0
 8002648:	460d      	mov	r5, r1
 800264a:	4b4c      	ldr	r3, [pc, #304]	; (800277c <main+0x16e4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff2e 	bl	80004b0 <__aeabi_f2d>
 8002654:	a342      	add	r3, pc, #264	; (adr r3, 8002760 <main+0x16c8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd fdc9 	bl	80001f0 <__aeabi_dsub>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fe fa01 	bl	8000a6c <__aeabi_dcmpge>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d100      	bne.n	8002672 <main+0x15da>
						{
							V_low = V_low - 0.1;
						}
						break;
 8002670:	e073      	b.n	800275a <main+0x16c2>
							V_low = V_low - 0.1;
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <main+0x16f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff1a 	bl	80004b0 <__aeabi_f2d>
 800267c:	a338      	add	r3, pc, #224	; (adr r3, 8002760 <main+0x16c8>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fd fdb5 	bl	80001f0 <__aeabi_dsub>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fa29 	bl	8000ae4 <__aeabi_d2f>
 8002692:	4603      	mov	r3, r0
 8002694:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <main+0x16f0>)
 8002696:	6013      	str	r3, [r2, #0]
						break;
 8002698:	e05f      	b.n	800275a <main+0x16c2>
					case '6':
						V_low -= 0.1;
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <main+0x16f0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff06 	bl	80004b0 <__aeabi_f2d>
 80026a4:	a32e      	add	r3, pc, #184	; (adr r3, 8002760 <main+0x16c8>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fd fda1 	bl	80001f0 <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa15 	bl	8000ae4 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a32      	ldr	r2, [pc, #200]	; (8002788 <main+0x16f0>)
 80026be:	6013      	str	r3, [r2, #0]
						if(V_low <= 0)
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <main+0x16f0>)
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	d900      	bls.n	80026d2 <main+0x163a>
						{
							V_low = 0;
						}
						break;
 80026d0:	e043      	b.n	800275a <main+0x16c2>
							V_low = 0;
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <main+0x16f0>)
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
						break;
 80026da:	e03e      	b.n	800275a <main+0x16c2>
					case '7':
						duty_cycle += 10;
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <main+0x16f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330a      	adds	r3, #10
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <main+0x16f8>)
 80026e4:	6013      	str	r3, [r2, #0]
						if(duty_cycle >= 100)
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <main+0x16f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b63      	cmp	r3, #99	; 0x63
 80026ec:	dd32      	ble.n	8002754 <main+0x16bc>
						{
							duty_cycle = 100;
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <main+0x16f8>)
 80026f0:	2264      	movs	r2, #100	; 0x64
 80026f2:	601a      	str	r2, [r3, #0]
						}
						break;
 80026f4:	e02e      	b.n	8002754 <main+0x16bc>
					case '8':
						duty_cycle -= 10;
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <main+0x16f8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3b0a      	subs	r3, #10
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <main+0x16f8>)
 80026fe:	6013      	str	r3, [r2, #0]
						if(duty_cycle <= 0)
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <main+0x16f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	dc27      	bgt.n	8002758 <main+0x16c0>
						{
							duty_cycle = 0;
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <main+0x16f8>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
						}
						break;
 800270e:	e023      	b.n	8002758 <main+0x16c0>
					case 'x':
						State_change = state_wait;
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <main+0x16fc>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
						break;
 8002716:	e020      	b.n	800275a <main+0x16c2>
					default:
					{
						char temp[] = 	"/// Wrong Information ///\r\n\n";
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <main+0x1700>)
 800271a:	f507 75a2 	add.w	r5, r7, #324	; 0x144
 800271e:	461c      	mov	r4, r3
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002724:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002728:	c507      	stmia	r5!, {r0, r1, r2}
 800272a:	702b      	strb	r3, [r5, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 800272c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fd51 	bl	80001d8 <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	b29a      	uxth	r2, r3
 800273a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 800273e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002742:	4816      	ldr	r0, [pc, #88]	; (800279c <main+0x1704>)
 8002744:	f003 fed3 	bl	80064ee <HAL_UART_Transmit>
						State_change = state_menu_sin;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <main+0x16fc>)
 800274a:	221e      	movs	r2, #30
 800274c:	601a      	str	r2, [r3, #0]
						break;
 800274e:	e004      	b.n	800275a <main+0x16c2>
						break;
 8002750:	bf00      	nop
 8002752:	e002      	b.n	800275a <main+0x16c2>
						break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <main+0x16c2>
						break;
 8002758:	bf00      	nop
					}
				}
				break;
 800275a:	bf00      	nop
	{
 800275c:	f7fe bcc3 	b.w	80010e6 <main+0x4e>
 8002760:	9999999a 	.word	0x9999999a
 8002764:	3fb99999 	.word	0x3fb99999
 8002768:	66666666 	.word	0x66666666
 800276c:	400a6666 	.word	0x400a6666
 8002770:	9999999a 	.word	0x9999999a
 8002774:	40099999 	.word	0x40099999
 8002778:	20000010 	.word	0x20000010
 800277c:	2000000c 	.word	0x2000000c
 8002780:	40533333 	.word	0x40533333
 8002784:	3dcccccd 	.word	0x3dcccccd
 8002788:	20000060 	.word	0x20000060
 800278c:	404ccccd 	.word	0x404ccccd
 8002790:	20000004 	.word	0x20000004
 8002794:	20000048 	.word	0x20000048
 8002798:	08007d30 	.word	0x08007d30
 800279c:	20000224 	.word	0x20000224

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b094      	sub	sp, #80	; 0x50
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2230      	movs	r2, #48	; 0x30
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 fcf4 	bl	800719c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <SystemClock_Config+0xc8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a26      	ldr	r2, [pc, #152]	; (8002868 <SystemClock_Config+0xc8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <SystemClock_Config+0xc8>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <SystemClock_Config+0xcc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <SystemClock_Config+0xcc>)
 80027ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <SystemClock_Config+0xcc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002804:	2310      	movs	r3, #16
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002808:	2302      	movs	r3, #2
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002810:	2308      	movs	r3, #8
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002818:	2302      	movs	r3, #2
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800281c:	2304      	movs	r3, #4
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	4618      	mov	r0, r3
 8002826:	f002 f961 	bl	8004aec <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002830:	f000 faa6 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002834:	230f      	movs	r3, #15
 8002836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002838:	2302      	movs	r3, #2
 800283a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2103      	movs	r1, #3
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fbc3 	bl	8004fdc <HAL_RCC_ClockConfig>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800285c:	f000 fa90 	bl	8002d80 <Error_Handler>
  }
}
 8002860:	bf00      	nop
 8002862:	3750      	adds	r7, #80	; 0x50
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000

08002870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002876:	463b      	mov	r3, r7
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <MX_ADC1_Init+0x9c>)
 8002884:	4a22      	ldr	r2, [pc, #136]	; (8002910 <MX_ADC1_Init+0xa0>)
 8002886:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <MX_ADC1_Init+0x9c>)
 800288a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800288e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <MX_ADC1_Init+0x9c>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <MX_ADC1_Init+0x9c>)
 8002898:	2201      	movs	r2, #1
 800289a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <MX_ADC1_Init+0x9c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_ADC1_Init+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_ADC1_Init+0x9c>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_ADC1_Init+0x9c>)
 80028b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_ADC1_Init+0x9c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_ADC1_Init+0x9c>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_ADC1_Init+0x9c>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_ADC1_Init+0x9c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <MX_ADC1_Init+0x9c>)
 80028d6:	f000 fce9 	bl	80032ac <HAL_ADC_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80028e0:	f000 fa4e 	bl	8002d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_ADC1_Init+0x9c>)
 80028f6:	f000 ff75 	bl	80037e4 <HAL_ADC_ConfigChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002900:	f000 fa3e 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000134 	.word	0x20000134
 8002910:	40012000 	.word	0x40012000

08002914 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_SPI3_Init+0x68>)
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <MX_SPI3_Init+0x6c>)
 800291c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <MX_SPI3_Init+0x68>)
 8002920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002924:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_SPI3_Init+0x68>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <MX_SPI3_Init+0x68>)
 800292e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002932:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_SPI3_Init+0x68>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_SPI3_Init+0x68>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_SPI3_Init+0x68>)
 8002942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002946:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_SPI3_Init+0x68>)
 800294a:	2220      	movs	r2, #32
 800294c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_SPI3_Init+0x68>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_SPI3_Init+0x68>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_SPI3_Init+0x68>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_SPI3_Init+0x68>)
 8002962:	220a      	movs	r2, #10
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_SPI3_Init+0x68>)
 8002968:	f002 fd34 	bl	80053d4 <HAL_SPI_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002972:	f000 fa05 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200000dc 	.word	0x200000dc
 8002980:	40003c00 	.word	0x40003c00

08002984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <MX_TIM3_Init+0x94>)
 80029a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029a8:	2264      	movs	r2, #100	; 0x64
 80029aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029b4:	2264      	movs	r2, #100	; 0x64
 80029b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029c4:	4813      	ldr	r0, [pc, #76]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029c6:	f003 f8a9 	bl	8005b1c <HAL_TIM_Base_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80029d0:	f000 f9d6 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4619      	mov	r1, r3
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029e2:	f003 faaf 	bl	8005f44 <HAL_TIM_ConfigClockSource>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80029ec:	f000 f9c8 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029f0:	2320      	movs	r3, #32
 80029f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f8:	463b      	mov	r3, r7
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_TIM3_Init+0x90>)
 80029fe:	f003 fca7 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002a08:	f000 f9ba 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000094 	.word	0x20000094
 8002a18:	40000400 	.word	0x40000400

08002a1c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a22:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <MX_TIM11_Init+0x44>)
 8002a24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a28:	2264      	movs	r2, #100	; 0x64
 8002a2a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a38:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_TIM11_Init+0x40>)
 8002a48:	f003 f868 	bl	8005b1c <HAL_TIM_Base_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002a52:	f000 f995 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000017c 	.word	0x2000017c
 8002a60:	40014800 	.word	0x40014800

08002a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <MX_USART2_UART_Init+0x50>)
 8002a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a9c:	f003 fcda 	bl	8006454 <HAL_UART_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aa6:	f000 f96b 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000224 	.word	0x20000224
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2038      	movs	r0, #56	; 0x38
 8002ae0:	f001 fa15 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ae4:	2038      	movs	r0, #56	; 0x38
 8002ae6:	f001 fa2e 	bl	8003f46 <HAL_NVIC_EnableIRQ>

}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a43      	ldr	r2, [pc, #268]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <MX_GPIO_Init+0x12c>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2120      	movs	r1, #32
 8002b82:	4829      	ldr	r0, [pc, #164]	; (8002c28 <MX_GPIO_Init+0x130>)
 8002b84:	f001 ff98 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8e:	4827      	ldr	r0, [pc, #156]	; (8002c2c <MX_GPIO_Init+0x134>)
 8002b90:	f001 ff92 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002b94:	2201      	movs	r2, #1
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	4825      	ldr	r0, [pc, #148]	; (8002c30 <MX_GPIO_Init+0x138>)
 8002b9a:	f001 ff8d 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ba4:	4820      	ldr	r0, [pc, #128]	; (8002c28 <MX_GPIO_Init+0x130>)
 8002ba6:	f001 ff87 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_GPIO_Init+0x13c>)
 8002bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	481c      	ldr	r0, [pc, #112]	; (8002c30 <MX_GPIO_Init+0x138>)
 8002bc0:	f001 fdde 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002bc4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4812      	ldr	r0, [pc, #72]	; (8002c28 <MX_GPIO_Init+0x130>)
 8002bde:	f001 fdcf 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480c      	ldr	r0, [pc, #48]	; (8002c2c <MX_GPIO_Init+0x134>)
 8002bfc:	f001 fdc0 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4806      	ldr	r0, [pc, #24]	; (8002c30 <MX_GPIO_Init+0x138>)
 8002c18:	f001 fdb2 	bl	8004780 <HAL_GPIO_Init>

}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	10210000 	.word	0x10210000

08002c38 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT() {
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 8002c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c42:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <UARTRecieveIT+0x54>)
 8002c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <UARTRecieveIT+0x54>)
 8002c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <UARTRecieveIT+0x58>)
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d010      	beq.n	8002c7c <UARTRecieveIT+0x44>
		data = RxDataBuffer[dataPos];
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <UARTRecieveIT+0x58>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <UARTRecieveIT+0x5c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <UARTRecieveIT+0x58>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <UARTRecieveIT+0x54>)
 8002c6c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c72:	fb02 f201 	mul.w	r2, r2, r1
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <UARTRecieveIT+0x58>)
 8002c7a:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	20000224 	.word	0x20000224
 8002c90:	20000090 	.word	0x20000090
 8002c94:	20000064 	.word	0x20000064

08002c98 <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002ca8:	88bb      	ldrh	r3, [r7, #4]
 8002caa:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cbe:	4807      	ldr	r0, [pc, #28]	; (8002cdc <MCP4922SetOutput+0x44>)
 8002cc0:	f001 fefa 	bl	8004ab8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <MCP4922SetOutput+0x48>)
 8002cce:	f002 fc0b 	bl	80054e8 <HAL_SPI_Transmit_IT>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	200000dc 	.word	0x200000dc

08002ce4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_SPI_TxCpltCallback+0x24>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d105      	bne.n	8002d00 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cfa:	4804      	ldr	r0, [pc, #16]	; (8002d0c <HAL_SPI_TxCpltCallback+0x28>)
 8002cfc:	f001 fedc 	bl	8004ab8 <HAL_GPIO_WritePin>
	}
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200000dc 	.word	0x200000dc
 8002d0c:	40020400 	.word	0x40020400

08002d10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b4b0      	push	{r4, r5, r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10c      	bne.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	1814      	adds	r4, r2, r0
 8002d30:	eb43 0501 	adc.w	r5, r3, r1
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d36:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bcb0      	pop	{r4, r5, r7}
 8002d42:	4770      	bx	lr
 8002d44:	2000017c 	.word	0x2000017c
 8002d48:	20000040 	.word	0x20000040

08002d4c <micros>:

inline uint64_t micros()
{
 8002d4c:	b4b0      	push	{r4, r5, r7}
 8002d4e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <micros+0x2c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	4618      	mov	r0, r3
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <micros+0x30>)
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	1884      	adds	r4, r0, r2
 8002d64:	eb41 0503 	adc.w	r5, r1, r3
 8002d68:	4622      	mov	r2, r4
 8002d6a:	462b      	mov	r3, r5
}
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bcb0      	pop	{r4, r5, r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000017c 	.word	0x2000017c
 8002d7c:	20000040 	.word	0x20000040

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d84:	b672      	cpsid	i
}
 8002d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d88:	e7fe      	b.n	8002d88 <Error_Handler+0x8>
	...

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f001 f894 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_ADC_MspInit+0xec>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d15f      	bne.n	8002ebe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_ADC_MspInit+0xf0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e36:	2302      	movs	r3, #2
 8002e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4821      	ldr	r0, [pc, #132]	; (8002ed0 <HAL_ADC_MspInit+0xf4>)
 8002e4a:	f001 fc99 	bl	8004780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_ADC_MspInit+0xfc>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e92:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002e94:	f001 f872 	bl	8003f7c <HAL_DMA_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e9e:	f7ff ff6f 	bl	8002d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_ADC_MspInit+0xf8>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2012      	movs	r0, #18
 8002eb4:	f001 f82b 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002eb8:	2012      	movs	r0, #18
 8002eba:	f001 f844 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40012000 	.word	0x40012000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	200001c4 	.word	0x200001c4
 8002ed8:	40026410 	.word	0x40026410

08002edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_SPI_MspInit+0x94>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d133      	bne.n	8002f66 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_SPI_MspInit+0x98>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f36:	2338      	movs	r3, #56	; 0x38
 8002f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f46:	2306      	movs	r3, #6
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4809      	ldr	r0, [pc, #36]	; (8002f78 <HAL_SPI_MspInit+0x9c>)
 8002f52:	f001 fc15 	bl	8004780 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2033      	movs	r0, #51	; 0x33
 8002f5c:	f000 ffd7 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002f60:	2033      	movs	r0, #51	; 0x33
 8002f62:	f000 fff0 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	; 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40003c00 	.word	0x40003c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020400 	.word	0x40020400

08002f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_TIM_Base_MspInit+0x70>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002faa:	e01a      	b.n	8002fe2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_TIM_Base_MspInit+0x78>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d115      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_TIM_Base_MspInit+0x74>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	201a      	movs	r0, #26
 8002fd8:	f000 ff99 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002fdc:	201a      	movs	r0, #26
 8002fde:	f000 ffb2 	bl	8003f46 <HAL_NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40014800 	.word	0x40014800

08002ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_UART_MspInit+0x94>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d133      	bne.n	8003082 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_UART_MspInit+0x98>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_UART_MspInit+0x98>)
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_UART_MspInit+0x98>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_UART_MspInit+0x98>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_UART_MspInit+0x98>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_UART_MspInit+0x98>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003052:	230c      	movs	r3, #12
 8003054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003062:	2307      	movs	r3, #7
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	4619      	mov	r1, r3
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <HAL_UART_MspInit+0x9c>)
 800306e:	f001 fb87 	bl	8004780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2026      	movs	r0, #38	; 0x26
 8003078:	f000 ff49 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800307c:	2026      	movs	r0, #38	; 0x26
 800307e:	f000 ff62 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40004400 	.word	0x40004400
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000

08003098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800309c:	e7fe      	b.n	800309c <NMI_Handler+0x4>

0800309e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a2:	e7fe      	b.n	80030a2 <HardFault_Handler+0x4>

080030a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <MemManage_Handler+0x4>

080030aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ae:	e7fe      	b.n	80030ae <BusFault_Handler+0x4>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <UsageFault_Handler+0x4>

080030b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e4:	f000 f8c2 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <ADC_IRQHandler+0x10>)
 80030f2:	f000 f91e 	bl	8003332 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000134 	.word	0x20000134

08003100 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003106:	f002 fe15 	bl	8005d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000017c 	.word	0x2000017c

08003114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <USART2_IRQHandler+0x10>)
 800311a:	f003 faab 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000224 	.word	0x20000224

08003128 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <SPI3_IRQHandler+0x10>)
 800312e:	f002 fa65 	bl	80055fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200000dc 	.word	0x200000dc

0800313c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <DMA2_Stream0_IRQHandler+0x10>)
 8003142:	f001 f8b3 	bl	80042ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200001c4 	.word	0x200001c4

08003150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <SystemInit+0x20>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <SystemInit+0x20>)
 800315c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003178:	480d      	ldr	r0, [pc, #52]	; (80031b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800317a:	490e      	ldr	r1, [pc, #56]	; (80031b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003190:	4c0b      	ldr	r4, [pc, #44]	; (80031c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800319e:	f7ff ffd7 	bl	8003150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a2:	f003 ffc9 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a6:	f7fd ff77 	bl	8001098 <main>
  bx  lr    
 80031aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80031b8:	08008460 	.word	0x08008460
  ldr r2, =_sbss
 80031bc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80031c0:	2000026c 	.word	0x2000026c

080031c4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c4:	e7fe      	b.n	80031c4 <DMA1_Stream0_IRQHandler>
	...

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 fe81 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f000 f808 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7ff fdc6 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fe99 	bl	8003f62 <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 fe61 	bl	8003f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000014 	.word	0x20000014
 8003264:	2000001c 	.word	0x2000001c
 8003268:	20000018 	.word	0x20000018

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000001c 	.word	0x2000001c
 8003290:	20000268 	.word	0x20000268

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000268 	.word	0x20000268

080032ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e033      	b.n	800332a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fd86 	bl	8002ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f2:	f023 0302 	bic.w	r3, r3, #2
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fba2 	bl	8003a48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
 800331a:	e001      	b.n	8003320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b20      	cmp	r3, #32
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d049      	beq.n	8003408 <HAL_ADC_IRQHandler+0xd6>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d046      	beq.n	8003408 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d12b      	bne.n	80033f8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d127      	bne.n	80033f8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d119      	bne.n	80033f8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0220 	bic.w	r2, r2, #32
 80033d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9cb 	bl	8003794 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f06f 0212 	mvn.w	r2, #18
 8003406:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b80      	cmp	r3, #128	; 0x80
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d057      	beq.n	80034ea <HAL_ADC_IRQHandler+0x1b8>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d054      	beq.n	80034ea <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d139      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800347e:	2b00      	cmp	r3, #0
 8003480:	d12b      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d124      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11d      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d119      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fc32 	bl	8003d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 020c 	mvn.w	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d017      	beq.n	800354c <HAL_ADC_IRQHandler+0x21a>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d014      	beq.n	800354c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10d      	bne.n	800354c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f93d 	bl	80037bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0201 	mvn.w	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_ADC_IRQHandler+0x27a>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0220 	mvn.w	r2, #32
 800359a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f917 	bl	80037d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0220 	mvn.w	r2, #32
 80035aa:	601a      	str	r2, [r3, #0]
  }
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_Start_DMA+0x1e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0ce      	b.n	8003770 <HAL_ADC_Start_DMA+0x1bc>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d018      	beq.n	800361a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035f8:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_ADC_Start_DMA+0x1c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5f      	ldr	r2, [pc, #380]	; (800377c <HAL_ADC_Start_DMA+0x1c8>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9a      	lsrs	r2, r3, #18
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800360c:	e002      	b.n	8003614 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3b01      	subs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f9      	bne.n	800360e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003628:	d107      	bne.n	800363a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	f040 8086 	bne.w	8003756 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003674:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d106      	bne.n	8003698 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f023 0206 	bic.w	r2, r3, #6
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
 8003696:	e002      	b.n	800369e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_ADC_Start_DMA+0x1cc>)
 80036a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4a35      	ldr	r2, [pc, #212]	; (8003784 <HAL_ADC_Start_DMA+0x1d0>)
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_ADC_Start_DMA+0x1d4>)
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	4a33      	ldr	r2, [pc, #204]	; (800378c <HAL_ADC_Start_DMA+0x1d8>)
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	334c      	adds	r3, #76	; 0x4c
 80036f6:	4619      	mov	r1, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f000 fcec 	bl	80040d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d129      	bne.n	800376e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	e020      	b.n	800376e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <HAL_ADC_Start_DMA+0x1dc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d11b      	bne.n	800376e <HAL_ADC_Start_DMA+0x1ba>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d114      	bne.n	800376e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e00b      	b.n	800376e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000014 	.word	0x20000014
 800377c:	431bde83 	.word	0x431bde83
 8003780:	40012300 	.word	0x40012300
 8003784:	08003c41 	.word	0x08003c41
 8003788:	08003cfb 	.word	0x08003cfb
 800378c:	08003d17 	.word	0x08003d17
 8003790:	40012000 	.word	0x40012000

08003794 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e113      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x244>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b09      	cmp	r3, #9
 800380e:	d925      	bls.n	800385c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68d9      	ldr	r1, [r3, #12]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	3b1e      	subs	r3, #30
 8003826:	2207      	movs	r2, #7
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43da      	mvns	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	400a      	ands	r2, r1
 8003834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68d9      	ldr	r1, [r3, #12]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4618      	mov	r0, r3
 8003848:	4603      	mov	r3, r0
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4403      	add	r3, r0
 800384e:	3b1e      	subs	r3, #30
 8003850:	409a      	lsls	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	e022      	b.n	80038a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6919      	ldr	r1, [r3, #16]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	2207      	movs	r2, #7
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43da      	mvns	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	400a      	ands	r2, r1
 800387e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6919      	ldr	r1, [r3, #16]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	4618      	mov	r0, r3
 8003892:	4603      	mov	r3, r0
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4403      	add	r3, r0
 8003898:	409a      	lsls	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d824      	bhi.n	80038f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	3b05      	subs	r3, #5
 80038bc:	221f      	movs	r2, #31
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	400a      	ands	r2, r1
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	3b05      	subs	r3, #5
 80038e6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
 80038f2:	e04c      	b.n	800398e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d824      	bhi.n	8003946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	3b23      	subs	r3, #35	; 0x23
 800390e:	221f      	movs	r2, #31
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43da      	mvns	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	4618      	mov	r0, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	3b23      	subs	r3, #35	; 0x23
 8003938:	fa00 f203 	lsl.w	r2, r0, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
 8003944:	e023      	b.n	800398e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	3b41      	subs	r3, #65	; 0x41
 8003958:	221f      	movs	r2, #31
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	400a      	ands	r2, r1
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b41      	subs	r3, #65	; 0x41
 8003982:	fa00 f203 	lsl.w	r2, r0, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_ADC_ConfigChannel+0x250>)
 8003990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <HAL_ADC_ConfigChannel+0x254>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d10f      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1d8>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b12      	cmp	r3, #18
 80039a2:	d10b      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_ADC_ConfigChannel+0x254>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d12b      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x23a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_ADC_ConfigChannel+0x258>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x1f4>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d122      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_ADC_ConfigChannel+0x258>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d111      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_ADC_ConfigChannel+0x25c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a11      	ldr	r2, [pc, #68]	; (8003a44 <HAL_ADC_ConfigChannel+0x260>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	0c9a      	lsrs	r2, r3, #18
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a10:	e002      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f9      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012300 	.word	0x40012300
 8003a38:	40012000 	.word	0x40012000
 8003a3c:	10000012 	.word	0x10000012
 8003a40:	20000014 	.word	0x20000014
 8003a44:	431bde83 	.word	0x431bde83

08003a48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a50:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <ADC_Init+0x1f0>)
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <ADC_Init+0x1f4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	e00f      	b.n	8003b46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0202 	bic.w	r2, r2, #2
 8003b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6899      	ldr	r1, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7e1b      	ldrb	r3, [r3, #24]
 8003b60:	005a      	lsls	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	035a      	lsls	r2, r3, #13
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	e007      	b.n	8003bbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	051a      	lsls	r2, r3, #20
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bfe:	025a      	lsls	r2, r3, #9
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	029a      	lsls	r2, r3, #10
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40012300 	.word	0x40012300
 8003c3c:	0f000001 	.word	0x0f000001

08003c40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d13c      	bne.n	8003cd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d12b      	bne.n	8003ccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d127      	bne.n	8003ccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d119      	bne.n	8003ccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0220 	bic.w	r2, r2, #32
 8003ca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fd61 	bl	8003794 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cd2:	e00e      	b.n	8003cf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fd75 	bl	80037d0 <HAL_ADC_ErrorCallback>
}
 8003ce6:	e004      	b.n	8003cf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fd4d 	bl	80037a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fd4a 	bl	80037d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d74:	4013      	ands	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	60d3      	str	r3, [r2, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__NVIC_GetPriorityGrouping+0x18>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	f003 0307 	and.w	r3, r3, #7
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db0b      	blt.n	8003de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	4907      	ldr	r1, [pc, #28]	; (8003df4 <__NVIC_EnableIRQ+0x38>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2001      	movs	r0, #1
 8003dde:	fa00 f202 	lsl.w	r2, r0, r2
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000e100 	.word	0xe000e100

08003df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	db0a      	blt.n	8003e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	490c      	ldr	r1, [pc, #48]	; (8003e44 <__NVIC_SetPriority+0x4c>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e20:	e00a      	b.n	8003e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <__NVIC_SetPriority+0x50>)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3b04      	subs	r3, #4
 8003e30:	0112      	lsls	r2, r2, #4
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	440b      	add	r3, r1
 8003e36:	761a      	strb	r2, [r3, #24]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f1c3 0307 	rsb	r3, r3, #7
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf28      	it	cs
 8003e6a:	2304      	movcs	r3, #4
 8003e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d902      	bls.n	8003e7c <NVIC_EncodePriority+0x30>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3b03      	subs	r3, #3
 8003e7a:	e000      	b.n	8003e7e <NVIC_EncodePriority+0x32>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e94:	f04f 31ff 	mov.w	r1, #4294967295
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	4313      	orrs	r3, r2
         );
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d301      	bcc.n	8003eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00f      	b.n	8003eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <SysTick_Config+0x40>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f7ff ff8e 	bl	8003df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x40>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff29 	bl	8003d58 <__NVIC_SetPriorityGrouping>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f20:	f7ff ff3e 	bl	8003da0 <__NVIC_GetPriorityGrouping>
 8003f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff ff8e 	bl	8003e4c <NVIC_EncodePriority>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5d 	bl	8003df8 <__NVIC_SetPriority>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff31 	bl	8003dbc <__NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffa2 	bl	8003eb4 <SysTick_Config>
 8003f70:	4603      	mov	r3, r0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7ff f984 	bl	8003294 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e099      	b.n	80040cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb8:	e00f      	b.n	8003fda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fba:	f7ff f96b 	bl	8003294 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d908      	bls.n	8003fda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e078      	b.n	80040cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e8      	bne.n	8003fba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_DMA_Init+0x158>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b04      	cmp	r3, #4
 8004032:	d107      	bne.n	8004044 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	4313      	orrs	r3, r2
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b04      	cmp	r3, #4
 800406c:	d117      	bne.n	800409e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fb01 	bl	8004688 <DMA_CheckFifoParam>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800409a:	2301      	movs	r3, #1
 800409c:	e016      	b.n	80040cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fab8 	bl	800461c <DMA_CalcBaseAndBitshift>
 80040ac:	4603      	mov	r3, r0
 80040ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	223f      	movs	r2, #63	; 0x3f
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f010803f 	.word	0xf010803f

080040d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Start_IT+0x26>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e040      	b.n	8004180 <HAL_DMA_Start_IT+0xa8>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d12f      	bne.n	8004172 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fa4a 	bl	80045c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	223f      	movs	r2, #63	; 0x3f
 8004132:	409a      	lsls	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0216 	orr.w	r2, r2, #22
 8004146:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e005      	b.n	800417e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004196:	f7ff f87d 	bl	8003294 <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d008      	beq.n	80041ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e052      	b.n	8004260 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0216 	bic.w	r2, r2, #22
 80041c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <HAL_DMA_Abort+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0208 	bic.w	r2, r2, #8
 80041f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800420a:	e013      	b.n	8004234 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800420c:	f7ff f842 	bl	8003294 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b05      	cmp	r3, #5
 8004218:	d90c      	bls.n	8004234 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e015      	b.n	8004260 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e4      	bne.n	800420c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	223f      	movs	r2, #63	; 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2280      	movs	r2, #128	; 0x80
 8004280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e00c      	b.n	80042a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2205      	movs	r2, #5
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042b8:	4b92      	ldr	r3, [pc, #584]	; (8004504 <HAL_DMA_IRQHandler+0x258>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a92      	ldr	r2, [pc, #584]	; (8004508 <HAL_DMA_IRQHandler+0x25c>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	2208      	movs	r2, #8
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0204 	bic.w	r2, r2, #4
 80042fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2208      	movs	r2, #8
 8004306:	409a      	lsls	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2201      	movs	r2, #1
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2204      	movs	r2, #4
 8004354:	409a      	lsls	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2204      	movs	r2, #4
 8004372:	409a      	lsls	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	2210      	movs	r2, #16
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d043      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d03c      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2210      	movs	r2, #16
 80043a8:	409a      	lsls	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d024      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
 80043da:	e01f      	b.n	800441c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e016      	b.n	800441c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0208 	bic.w	r2, r2, #8
 800440a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	2220      	movs	r2, #32
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 808e 	beq.w	800454a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8086 	beq.w	800454a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	2220      	movs	r2, #32
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b05      	cmp	r3, #5
 8004454:	d136      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0216 	bic.w	r2, r2, #22
 8004464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_DMA_IRQHandler+0x1da>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0208 	bic.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	223f      	movs	r2, #63	; 0x3f
 800449c:	409a      	lsls	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07d      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
        }
        return;
 80044c2:	e078      	b.n	80045b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01c      	beq.n	800450c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d030      	beq.n	800454a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e02b      	b.n	800454a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
 8004502:	e022      	b.n	800454a <HAL_DMA_IRQHandler+0x29e>
 8004504:	20000014 	.word	0x20000014
 8004508:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0210 	bic.w	r2, r2, #16
 8004528:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d032      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d022      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2205      	movs	r2, #5
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3301      	adds	r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	429a      	cmp	r2, r3
 8004580:	d307      	bcc.n	8004592 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f2      	bne.n	8004576 <HAL_DMA_IRQHandler+0x2ca>
 8004590:	e000      	b.n	8004594 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004592:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e000      	b.n	80045b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045b6:	bf00      	nop
    }
  }
}
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop

080045c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d108      	bne.n	8004600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045fe:	e007      	b.n	8004610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	3b10      	subs	r3, #16
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <DMA_CalcBaseAndBitshift+0x64>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <DMA_CalcBaseAndBitshift+0x68>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d909      	bls.n	800465e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	659a      	str	r2, [r3, #88]	; 0x58
 800465c:	e007      	b.n	800466e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	aaaaaaab 	.word	0xaaaaaaab
 8004684:	08008078 	.word	0x08008078

08004688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11f      	bne.n	80046e2 <DMA_CheckFifoParam+0x5a>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d856      	bhi.n	8004756 <DMA_CheckFifoParam+0xce>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <DMA_CheckFifoParam+0x28>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d3 	.word	0x080046d3
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	08004757 	.word	0x08004757
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d046      	beq.n	800475a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e043      	b.n	800475a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046da:	d140      	bne.n	800475e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e0:	e03d      	b.n	800475e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d121      	bne.n	8004730 <DMA_CheckFifoParam+0xa8>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d837      	bhi.n	8004762 <DMA_CheckFifoParam+0xda>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <DMA_CheckFifoParam+0x70>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004709 	.word	0x08004709
 80046fc:	0800470f 	.word	0x0800470f
 8004700:	08004709 	.word	0x08004709
 8004704:	08004721 	.word	0x08004721
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e030      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d025      	beq.n	8004766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471e:	e022      	b.n	8004766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800472e:	e01c      	b.n	800476a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d903      	bls.n	800473e <DMA_CheckFifoParam+0xb6>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d003      	beq.n	8004744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800473c:	e018      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      break;
 8004742:	e015      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e00b      	b.n	800476e <DMA_CheckFifoParam+0xe6>
      break;
 8004756:	bf00      	nop
 8004758:	e00a      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e008      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
 8004760:	e006      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;   
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800476e:	bf00      	nop
    }
  } 
  
  return status; 
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e159      	b.n	8004a50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800479c:	2201      	movs	r2, #1
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f040 8148 	bne.w	8004a4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d005      	beq.n	80047d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d130      	bne.n	8004834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004808:	2201      	movs	r2, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 0201 	and.w	r2, r3, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d017      	beq.n	8004870 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2203      	movs	r2, #3
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d123      	bne.n	80048c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	08da      	lsrs	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3208      	adds	r2, #8
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	69b9      	ldr	r1, [r7, #24]
 80048c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0203 	and.w	r2, r3, #3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80a2 	beq.w	8004a4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <HAL_GPIO_Init+0x2e8>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	4a56      	ldr	r2, [pc, #344]	; (8004a68 <HAL_GPIO_Init+0x2e8>)
 8004910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	4b54      	ldr	r3, [pc, #336]	; (8004a68 <HAL_GPIO_Init+0x2e8>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004922:	4a52      	ldr	r2, [pc, #328]	; (8004a6c <HAL_GPIO_Init+0x2ec>)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	3302      	adds	r3, #2
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a49      	ldr	r2, [pc, #292]	; (8004a70 <HAL_GPIO_Init+0x2f0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d019      	beq.n	8004982 <HAL_GPIO_Init+0x202>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a48      	ldr	r2, [pc, #288]	; (8004a74 <HAL_GPIO_Init+0x2f4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_GPIO_Init+0x1fe>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a47      	ldr	r2, [pc, #284]	; (8004a78 <HAL_GPIO_Init+0x2f8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00d      	beq.n	800497a <HAL_GPIO_Init+0x1fa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a46      	ldr	r2, [pc, #280]	; (8004a7c <HAL_GPIO_Init+0x2fc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <HAL_GPIO_Init+0x1f6>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a45      	ldr	r2, [pc, #276]	; (8004a80 <HAL_GPIO_Init+0x300>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_GPIO_Init+0x1f2>
 800496e:	2304      	movs	r3, #4
 8004970:	e008      	b.n	8004984 <HAL_GPIO_Init+0x204>
 8004972:	2307      	movs	r3, #7
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x204>
 8004976:	2303      	movs	r3, #3
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x204>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x204>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x204>
 8004982:	2300      	movs	r3, #0
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	4093      	lsls	r3, r2
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_GPIO_Init+0x2ec>)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a2:	4b38      	ldr	r3, [pc, #224]	; (8004a84 <HAL_GPIO_Init+0x304>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <HAL_GPIO_Init+0x304>)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049cc:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_GPIO_Init+0x304>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049f0:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <HAL_GPIO_Init+0x304>)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <HAL_GPIO_Init+0x304>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_GPIO_Init+0x304>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a20:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <HAL_GPIO_Init+0x304>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <HAL_GPIO_Init+0x304>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	f67f aea2 	bls.w	800479c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3724      	adds	r7, #36	; 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40020000 	.word	0x40020000
 8004a74:	40020400 	.word	0x40020400
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020c00 	.word	0x40020c00
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40013c00 	.word	0x40013c00

08004a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	887b      	ldrh	r3, [r7, #2]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e001      	b.n	8004aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ac8:	787b      	ldrb	r3, [r7, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ad4:	e003      	b.n	8004ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ad6:	887b      	ldrh	r3, [r7, #2]
 8004ad8:	041a      	lsls	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	619a      	str	r2, [r3, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e264      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d075      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0a:	4ba3      	ldr	r3, [pc, #652]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d00c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	4ba0      	ldr	r3, [pc, #640]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d112      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b22:	4b9d      	ldr	r3, [pc, #628]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2e:	d10b      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d05b      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x108>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d157      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e23f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d106      	bne.n	8004b60 <HAL_RCC_OscConfig+0x74>
 8004b52:	4b91      	ldr	r3, [pc, #580]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a90      	ldr	r2, [pc, #576]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e01d      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b8b      	ldr	r3, [pc, #556]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a8a      	ldr	r2, [pc, #552]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b88      	ldr	r3, [pc, #544]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a87      	ldr	r2, [pc, #540]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e00b      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b84:	4b84      	ldr	r3, [pc, #528]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a83      	ldr	r2, [pc, #524]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fb76 	bl	8003294 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe fb72 	bl	8003294 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e204      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0xc0>
 8004bca:	e014      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fb62 	bl	8003294 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fe fb5e 	bl	8003294 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1f0      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	4b6c      	ldr	r3, [pc, #432]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0xe8>
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d063      	beq.n	8004cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c02:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0e:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d11c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b5c      	ldr	r3, [pc, #368]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_RCC_OscConfig+0x152>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e1c4      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4952      	ldr	r1, [pc, #328]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e03a      	b.n	8004cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCC_OscConfig+0x2b0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fe fb17 	bl	8003294 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fe fb13 	bl	8003294 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1a5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	4b46      	ldr	r3, [pc, #280]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4940      	ldr	r1, [pc, #256]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCC_OscConfig+0x2b0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe faf6 	bl	8003294 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fe faf2 	bl	8003294 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e184      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d030      	beq.n	8004d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cde:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_RCC_OscConfig+0x2b4>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fe fad6 	bl	8003294 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fe fad2 	bl	8003294 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e164      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x200>
 8004d0a:	e015      	b.n	8004d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0c:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_OscConfig+0x2b4>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d12:	f7fe fabf 	bl	8003294 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fe fabb 	bl	8003294 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e14d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a0 	beq.w	8004e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_RCC_OscConfig+0x2b8>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7fe fa81 	bl	8003294 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e011      	b.n	8004dba <HAL_RCC_OscConfig+0x2ce>
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470000 	.word	0x42470000
 8004da0:	42470e80 	.word	0x42470e80
 8004da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fe fa74 	bl	8003294 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e106      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dba:	4b85      	ldr	r3, [pc, #532]	; (8004fd0 <HAL_RCC_OscConfig+0x4e4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x32a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x312>
 8004de4:	4b7b      	ldr	r3, [pc, #492]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a7a      	ldr	r2, [pc, #488]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a77      	ldr	r2, [pc, #476]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x32a>
 8004dfe:	4b75      	ldr	r3, [pc, #468]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b72      	ldr	r3, [pc, #456]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a71      	ldr	r2, [pc, #452]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fe fa39 	bl	8003294 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fe fa35 	bl	8003294 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0c5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x33a>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fa23 	bl	8003294 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fe fa1f 	bl	8003294 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0af      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b5a      	ldr	r3, [pc, #360]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a55      	ldr	r2, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 809b 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d05c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d141      	bne.n	8004f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe f9f3 	bl	8003294 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fe f9ef 	bl	8003294 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e081      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	019b      	lsls	r3, r3, #6
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	4937      	ldr	r1, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fe f9c8 	bl	8003294 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fe f9c4 	bl	8003294 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e056      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x41c>
 8004f26:	e04e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x4ec>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7fe f9b1 	bl	8003294 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7fe f9ad 	bl	8003294 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e03f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x44a>
 8004f54:	e037      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e032      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCC_OscConfig+0x4e8>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d028      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d121      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d11a      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f92:	4013      	ands	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	42470060 	.word	0x42470060

08004fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0cc      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b68      	ldr	r3, [pc, #416]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90c      	bls.n	8005018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b65      	ldr	r3, [pc, #404]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b63      	ldr	r3, [pc, #396]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0b8      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005030:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a58      	ldr	r2, [pc, #352]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800503a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005048:	4b53      	ldr	r3, [pc, #332]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a52      	ldr	r2, [pc, #328]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	494d      	ldr	r1, [pc, #308]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d044      	beq.n	80050fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d119      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d003      	beq.n	800509a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005096:	2b03      	cmp	r3, #3
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e067      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ba:	4b37      	ldr	r3, [pc, #220]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 0203 	bic.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4934      	ldr	r1, [pc, #208]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050cc:	f7fe f8e2 	bl	8003294 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fe f8de 	bl	8003294 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e04f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 020c 	and.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d1eb      	bne.n	80050d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050fc:	4b25      	ldr	r3, [pc, #148]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d20c      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e032      	b.n	800518a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005130:	4b19      	ldr	r3, [pc, #100]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4916      	ldr	r1, [pc, #88]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	490e      	ldr	r1, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005162:	f000 f821 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490a      	ldr	r1, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe f842 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023c00 	.word	0x40023c00
 8005198:	40023800 	.word	0x40023800
 800519c:	08008060 	.word	0x08008060
 80051a0:	20000014 	.word	0x20000014
 80051a4:	20000018 	.word	0x20000018

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	2300      	movs	r3, #0
 80051ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c0:	4b67      	ldr	r3, [pc, #412]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d00d      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x40>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	f200 80bd 	bhi.w	800534c <HAL_RCC_GetSysClockFreq+0x1a4>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x34>
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d003      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051da:	e0b7      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051de:	60bb      	str	r3, [r7, #8]
       break;
 80051e0:	e0b7      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e2:	4b61      	ldr	r3, [pc, #388]	; (8005368 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051e4:	60bb      	str	r3, [r7, #8]
      break;
 80051e6:	e0b4      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e8:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051f2:	4b5b      	ldr	r3, [pc, #364]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d04d      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fe:	4b58      	ldr	r3, [pc, #352]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	461a      	mov	r2, r3
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	ea02 0800 	and.w	r8, r2, r0
 8005216:	ea03 0901 	and.w	r9, r3, r1
 800521a:	4640      	mov	r0, r8
 800521c:	4649      	mov	r1, r9
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	014b      	lsls	r3, r1, #5
 8005228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800522c:	0142      	lsls	r2, r0, #5
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	ebb0 0008 	subs.w	r0, r0, r8
 8005236:	eb61 0109 	sbc.w	r1, r1, r9
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	018b      	lsls	r3, r1, #6
 8005244:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005248:	0182      	lsls	r2, r0, #6
 800524a:	1a12      	subs	r2, r2, r0
 800524c:	eb63 0301 	sbc.w	r3, r3, r1
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	00d9      	lsls	r1, r3, #3
 800525a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800525e:	00d0      	lsls	r0, r2, #3
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	eb12 0208 	adds.w	r2, r2, r8
 8005268:	eb43 0309 	adc.w	r3, r3, r9
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	0259      	lsls	r1, r3, #9
 8005276:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800527a:	0250      	lsls	r0, r2, #9
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	461a      	mov	r2, r3
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	f7fb fd88 	bl	8000da0 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4613      	mov	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e04a      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	099b      	lsrs	r3, r3, #6
 80052a0:	461a      	mov	r2, r3
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	ea02 0400 	and.w	r4, r2, r0
 80052b2:	ea03 0501 	and.w	r5, r3, r1
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	014b      	lsls	r3, r1, #5
 80052c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052c8:	0142      	lsls	r2, r0, #5
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	1b00      	subs	r0, r0, r4
 80052d0:	eb61 0105 	sbc.w	r1, r1, r5
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	018b      	lsls	r3, r1, #6
 80052de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052e2:	0182      	lsls	r2, r0, #6
 80052e4:	1a12      	subs	r2, r2, r0
 80052e6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ea:	f04f 0000 	mov.w	r0, #0
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	00d9      	lsls	r1, r3, #3
 80052f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f8:	00d0      	lsls	r0, r2, #3
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	1912      	adds	r2, r2, r4
 8005300:	eb45 0303 	adc.w	r3, r5, r3
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	0299      	lsls	r1, r3, #10
 800530e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005312:	0290      	lsls	r0, r2, #10
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f7fb fd3c 	bl	8000da0 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4613      	mov	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	60bb      	str	r3, [r7, #8]
      break;
 800534a:	e002      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800534e:	60bb      	str	r3, [r7, #8]
      break;
 8005350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005352:	68bb      	ldr	r3, [r7, #8]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	00f42400 	.word	0x00f42400
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCC_GetHCLKFreq+0x14>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000014 	.word	0x20000014

08005384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005388:	f7ff fff0 	bl	800536c <HAL_RCC_GetHCLKFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4903      	ldr	r1, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	08008070 	.word	0x08008070

080053ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053b0:	f7ff ffdc 	bl	800536c <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0b5b      	lsrs	r3, r3, #13
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	08008070 	.word	0x08008070

080053d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e07b      	b.n	80054de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d009      	beq.n	800540c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	61da      	str	r2, [r3, #28]
 80053fe:	e005      	b.n	800540c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fd fd58 	bl	8002edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	ea42 0103 	orr.w	r1, r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	f003 0104 	and.w	r1, r3, #4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	f003 0210 	and.w	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_SPI_Transmit_IT+0x20>
 8005504:	2302      	movs	r3, #2
 8005506:	e06f      	b.n	80055e8 <HAL_SPI_Transmit_IT+0x100>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_SPI_Transmit_IT+0x34>
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005520:	e05d      	b.n	80055de <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d002      	beq.n	8005534 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005532:	e054      	b.n	80055de <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2203      	movs	r2, #3
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <HAL_SPI_Transmit_IT+0x10c>)
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
 800557a:	e002      	b.n	8005582 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <HAL_SPI_Transmit_IT+0x110>)
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558a:	d10f      	bne.n	80055ac <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80055ba:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d008      	beq.n	80055dc <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e000      	b.n	80055de <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80055dc:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	0800587f 	.word	0x0800587f
 80055f8:	08005839 	.word	0x08005839

080055fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10f      	bne.n	8005640 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
    return;
 800563e:	e0d7      	b.n	80057f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_SPI_IRQHandler+0x66>
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
    return;
 8005660:	e0c6      	b.n	80057f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_SPI_IRQHandler+0x8c>
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	099b      	lsrs	r3, r3, #6
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80b4 	beq.w	80057f0 <HAL_SPI_IRQHandler+0x1f4>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80ad 	beq.w	80057f0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d023      	beq.n	80056ea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d011      	beq.n	80056d2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	e00b      	b.n	80056ea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	693b      	ldr	r3, [r7, #16]
        return;
 80056e8:	e082      	b.n	80057f0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d014      	beq.n	8005720 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f043 0201 	orr.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0208 	orr.w	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04f      	beq.n	80057ee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <HAL_SPI_IRQHandler+0x17e>
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d034      	beq.n	80057e4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0203 	bic.w	r2, r2, #3
 8005788:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d011      	beq.n	80057b6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_SPI_IRQHandler+0x1fc>)
 8005798:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fd62 	bl	8004268 <HAL_DMA_Abort_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c2:	4a0d      	ldr	r2, [pc, #52]	; (80057f8 <HAL_SPI_IRQHandler+0x1fc>)
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fd4c 	bl	8004268 <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057e2:	e003      	b.n	80057ec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f809 	bl	80057fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057ea:	e000      	b.n	80057ee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80057ec:	bf00      	nop
    return;
 80057ee:	bf00      	nop
  }
}
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	08005811 	.word	0x08005811

080057fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ffe6 	bl	80057fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8f1 	bl	8005a58 <SPI_CloseTx_ISR>
  }
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f8cf 	bl	8005a58 <SPI_CloseTx_ISR>
  }
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d4:	f7fd fcde 	bl	8003294 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e4:	f7fd fcd6 	bl	8003294 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ea:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	015b      	lsls	r3, r3, #5
 80058f0:	0d1b      	lsrs	r3, r3, #20
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fa:	e054      	b.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d050      	beq.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005904:	f7fd fcc6 	bl	8003294 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d13d      	bne.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005932:	d111      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593c:	d004      	beq.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005946:	d107      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005960:	d10f      	bne.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e017      	b.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d19b      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000014 	.word	0x20000014

080059d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <SPI_EndRxTxTransaction+0x7c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <SPI_EndRxTxTransaction+0x80>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	0d5b      	lsrs	r3, r3, #21
 80059ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fe:	d112      	bne.n	8005a26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ff5a 	bl	80058c4 <SPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e00f      	b.n	8005a46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d0f2      	beq.n	8005a26 <SPI_EndRxTxTransaction+0x52>
 8005a40:	e000      	b.n	8005a44 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a42:	bf00      	nop
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000014 	.word	0x20000014
 8005a54:	165e9f81 	.word	0x165e9f81

08005a58 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005a60:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <SPI_CloseTx_ISR+0xbc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <SPI_CloseTx_ISR+0xc0>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0a5b      	lsrs	r3, r3, #9
 8005a6c:	2264      	movs	r2, #100	; 0x64
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a74:	f7fd fc0e 	bl	8003294 <HAL_GetTick>
 8005a78:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a8c:	e009      	b.n	8005aa2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0eb      	beq.n	8005a7a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	2164      	movs	r1, #100	; 0x64
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ff8c 	bl	80059d4 <SPI_EndRxTxTransaction>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fe7d 	bl	80057fc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b02:	e002      	b.n	8005b0a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7fd f8ed 	bl	8002ce4 <HAL_SPI_TxCpltCallback>
}
 8005b0a:	bf00      	nop
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000014 	.word	0x20000014
 8005b18:	057619f1 	.word	0x057619f1

08005b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e041      	b.n	8005bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fd fa1a 	bl	8002f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f000 fade 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d001      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e03c      	b.n	8005c4e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_TIM_Base_Start+0xa0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_Base_Start+0x5c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d013      	beq.n	8005c18 <HAL_TIM_Base_Start+0x5c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_TIM_Base_Start+0xa4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_TIM_Base_Start+0x5c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_TIM_Base_Start+0xa8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIM_Base_Start+0x5c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <HAL_TIM_Base_Start+0xac>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIM_Base_Start+0x5c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <HAL_TIM_Base_Start+0xb0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d111      	bne.n	8005c3c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d010      	beq.n	8005c4c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e007      	b.n	8005c4c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40014000 	.word	0x40014000

08005c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e044      	b.n	8005d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x6c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d013      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x6c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x6c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x6c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x6c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d111      	bne.n	8005d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d010      	beq.n	8005d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	e007      	b.n	8005d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40014000 	.word	0x40014000

08005d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0202 	mvn.w	r2, #2
 8005d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f9b2 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9a4 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9b5 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0204 	mvn.w	r2, #4
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f988 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f97a 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f98b 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d122      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d11b      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0208 	mvn.w	r2, #8
 8005e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f95e 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f950 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f961 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d122      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d11b      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0210 	mvn.w	r2, #16
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2208      	movs	r2, #8
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f934 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f926 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f937 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d10e      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0201 	mvn.w	r2, #1
 8005eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fc ff2c 	bl	8002d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b80      	cmp	r3, #128	; 0x80
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed0:	2b80      	cmp	r3, #128	; 0x80
 8005ed2:	d107      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 faae 	bl	8006440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d10e      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d107      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8fc 	bl	8006108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d10e      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d107      	bne.n	8005f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0220 	mvn.w	r2, #32
 8005f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa78 	bl	800642c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIM_ConfigClockSource+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e0b3      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x180>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f94:	d03e      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0xd0>
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9a:	f200 8087 	bhi.w	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	f000 8085 	beq.w	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005faa:	d87f      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fac:	2b70      	cmp	r3, #112	; 0x70
 8005fae:	d01a      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0xa2>
 8005fb0:	2b70      	cmp	r3, #112	; 0x70
 8005fb2:	d87b      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fb4:	2b60      	cmp	r3, #96	; 0x60
 8005fb6:	d050      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x116>
 8005fb8:	2b60      	cmp	r3, #96	; 0x60
 8005fba:	d877      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fbc:	2b50      	cmp	r3, #80	; 0x50
 8005fbe:	d03c      	beq.n	800603a <HAL_TIM_ConfigClockSource+0xf6>
 8005fc0:	2b50      	cmp	r3, #80	; 0x50
 8005fc2:	d873      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d058      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x136>
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d86f      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fcc:	2b30      	cmp	r3, #48	; 0x30
 8005fce:	d064      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x156>
 8005fd0:	2b30      	cmp	r3, #48	; 0x30
 8005fd2:	d86b      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d060      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x156>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d867      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05c      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x156>
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d05a      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fe4:	e062      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6899      	ldr	r1, [r3, #8]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f000 f98b 	bl	8006310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006008:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	609a      	str	r2, [r3, #8]
      break;
 8006012:	e04e      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	6899      	ldr	r1, [r3, #8]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f000 f974 	bl	8006310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006036:	609a      	str	r2, [r3, #8]
      break;
 8006038:	e03b      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	461a      	mov	r2, r3
 8006048:	f000 f8e8 	bl	800621c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2150      	movs	r1, #80	; 0x50
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f941 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 8006058:	e02b      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	461a      	mov	r2, r3
 8006068:	f000 f907 	bl	800627a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2160      	movs	r1, #96	; 0x60
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f931 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 8006078:	e01b      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	461a      	mov	r2, r3
 8006088:	f000 f8c8 	bl	800621c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f921 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 8006098:	e00b      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f000 f918 	bl	80062da <TIM_ITRx_SetConfig>
        break;
 80060aa:	e002      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a34      	ldr	r2, [pc, #208]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a31      	ldr	r2, [pc, #196]	; (8006204 <TIM_Base_SetConfig+0xe8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a30      	ldr	r2, [pc, #192]	; (8006208 <TIM_Base_SetConfig+0xec>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2f      	ldr	r2, [pc, #188]	; (800620c <TIM_Base_SetConfig+0xf0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a25      	ldr	r2, [pc, #148]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01b      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d017      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a22      	ldr	r2, [pc, #136]	; (8006204 <TIM_Base_SetConfig+0xe8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a21      	ldr	r2, [pc, #132]	; (8006208 <TIM_Base_SetConfig+0xec>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_Base_SetConfig+0xf0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_Base_SetConfig+0xf4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <TIM_Base_SetConfig+0xf8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <TIM_Base_SetConfig+0xfc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a08      	ldr	r2, [pc, #32]	; (8006200 <TIM_Base_SetConfig+0xe4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800

0800621c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f023 0201 	bic.w	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 030a 	bic.w	r3, r3, #10
 8006258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800627a:	b480      	push	{r7}
 800627c:	b087      	sub	sp, #28
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0210 	bic.w	r2, r3, #16
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f043 0307 	orr.w	r3, r3, #7
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800632a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e050      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a16      	ldr	r2, [pc, #88]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40014000 	.word	0x40014000

0800642c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e03f      	b.n	80064e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fc fdbc 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc85 	bl	8006da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b08a      	sub	sp, #40	; 0x28
 80064f2:	af02      	add	r7, sp, #8
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b20      	cmp	r3, #32
 800650c:	d17c      	bne.n	8006608 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_UART_Transmit+0x2c>
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e075      	b.n	800660a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UART_Transmit+0x3e>
 8006528:	2302      	movs	r3, #2
 800652a:	e06e      	b.n	800660a <HAL_UART_Transmit+0x11c>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2221      	movs	r2, #33	; 0x21
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006542:	f7fc fea7 	bl	8003294 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d108      	bne.n	8006570 <HAL_UART_Transmit+0x82>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e003      	b.n	8006578 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006580:	e02a      	b.n	80065d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fa47 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e036      	b.n	800660a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3302      	adds	r3, #2
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e007      	b.n	80065ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	3301      	adds	r3, #1
 80065c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1cf      	bne.n	8006582 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	2140      	movs	r1, #64	; 0x40
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa17 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	e000      	b.n	800660a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006608:	2302      	movs	r3, #2
  }
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	4613      	mov	r3, r2
 800661e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b20      	cmp	r3, #32
 800662a:	d11d      	bne.n	8006668 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_UART_Receive_IT+0x26>
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e016      	b.n	800666a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_UART_Receive_IT+0x38>
 8006646:	2302      	movs	r3, #2
 8006648:	e00f      	b.n	800666a <HAL_UART_Receive_IT+0x58>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	461a      	mov	r2, r3
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fa28 	bl	8006ab4 <UART_Start_Receive_IT>
 8006664:	4603      	mov	r3, r0
 8006666:	e000      	b.n	800666a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_UART_IRQHandler+0x52>
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fadb 	bl	8006c7a <UART_Receive_IT>
      return;
 80066c4:	e17c      	b.n	80069c0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80b1 	beq.w	8006830 <HAL_UART_IRQHandler+0x1bc>
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <HAL_UART_IRQHandler+0x70>
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80a6 	beq.w	8006830 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <HAL_UART_IRQHandler+0x90>
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f043 0201 	orr.w	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_UART_IRQHandler+0xb0>
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f043 0202 	orr.w	r2, r3, #2
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_UART_IRQHandler+0xd0>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f043 0204 	orr.w	r2, r3, #4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00f      	beq.n	800676e <HAL_UART_IRQHandler+0xfa>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <HAL_UART_IRQHandler+0xee>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0208 	orr.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 811f 	beq.w	80069b6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_UART_IRQHandler+0x11e>
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa74 	bl	8006c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <HAL_UART_IRQHandler+0x146>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d031      	beq.n	800681e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9b4 	bl	8006b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d123      	bne.n	8006816 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d013      	beq.n	800680e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	4a77      	ldr	r2, [pc, #476]	; (80069c8 <HAL_UART_IRQHandler+0x354>)
 80067ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fd fd38 	bl	8004268 <HAL_DMA_Abort_IT>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e00e      	b.n	800682c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8f0 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00a      	b.n	800682c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8ec 	bl	80069f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e006      	b.n	800682c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f8e8 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800682a:	e0c4      	b.n	80069b6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	bf00      	nop
    return;
 800682e:	e0c2      	b.n	80069b6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	f040 80a2 	bne.w	800697e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 809c 	beq.w	800697e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8096 	beq.w	800697e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d14f      	bne.n	8006916 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006880:	8a3b      	ldrh	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8099 	beq.w	80069ba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800688c:	8a3a      	ldrh	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	f080 8093 	bcs.w	80069ba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8a3a      	ldrh	r2, [r7, #16]
 8006898:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a4:	d02b      	beq.n	80068fe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0210 	bic.w	r2, r2, #16
 80068f2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fc45 	bl	8004188 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006906:	b29b      	uxth	r3, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	b29b      	uxth	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f87a 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006914:	e051      	b.n	80069ba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800691e:	b29b      	uxth	r3, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d047      	beq.n	80069be <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800692e:	8a7b      	ldrh	r3, [r7, #18]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d044      	beq.n	80069be <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006942:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0210 	bic.w	r2, r2, #16
 8006970:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006972:	8a7b      	ldrh	r3, [r7, #18]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f846 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800697c:	e01f      	b.n	80069be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_UART_IRQHandler+0x326>
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f909 	bl	8006baa <UART_Transmit_IT>
    return;
 8006998:	e012      	b.n	80069c0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <HAL_UART_IRQHandler+0x34c>
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f94b 	bl	8006c4a <UART_EndTransmit_IT>
    return;
 80069b4:	e004      	b.n	80069c0 <HAL_UART_IRQHandler+0x34c>
    return;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80069be:	bf00      	nop
  }
}
 80069c0:	3728      	adds	r7, #40	; 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08006b83 	.word	0x08006b83

080069cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a30:	e02c      	b.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d028      	beq.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a40:	f7fc fc28 	bl	8003294 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d21d      	bcs.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e00f      	b.n	8006aac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4013      	ands	r3, r2
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d0c3      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2222      	movs	r2, #34	; 0x22
 8006ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0220 	orr.w	r2, r2, #32
 8006b18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0210 	bic.w	r2, r2, #16
 8006b66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff ff29 	bl	80069f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b21      	cmp	r3, #33	; 0x21
 8006bbc:	d13e      	bne.n	8006c3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	d114      	bne.n	8006bf2 <UART_Transmit_IT+0x48>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	621a      	str	r2, [r3, #32]
 8006bf0:	e008      	b.n	8006c04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6211      	str	r1, [r2, #32]
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4619      	mov	r1, r3
 8006c12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff feae 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b22      	cmp	r3, #34	; 0x22
 8006c8c:	f040 8087 	bne.w	8006d9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c98:	d117      	bne.n	8006cca <UART_Receive_IT+0x50>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d113      	bne.n	8006cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8006cc8:	e026      	b.n	8006d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cdc:	d007      	beq.n	8006cee <UART_Receive_IT+0x74>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <UART_Receive_IT+0x82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e008      	b.n	8006d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4619      	mov	r1, r3
 8006d26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d136      	bne.n	8006d9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0220 	bic.w	r2, r2, #32
 8006d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d10e      	bne.n	8006d8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0210 	bic.w	r2, r2, #16
 8006d7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fe40 	bl	8006a08 <HAL_UARTEx_RxEventCallback>
 8006d88:	e002      	b.n	8006d90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fe28 	bl	80069e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e002      	b.n	8006da0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	b09f      	sub	sp, #124	; 0x7c
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	68d9      	ldr	r1, [r3, #12]
 8006dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	ea40 0301 	orr.w	r3, r0, r1
 8006dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dec:	f021 010c 	bic.w	r1, r1, #12
 8006df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df6:	430b      	orrs	r3, r1
 8006df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e06:	6999      	ldr	r1, [r3, #24]
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	ea40 0301 	orr.w	r3, r0, r1
 8006e10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4bc5      	ldr	r3, [pc, #788]	; (800712c <UART_SetConfig+0x384>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d004      	beq.n	8006e26 <UART_SetConfig+0x7e>
 8006e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	4bc3      	ldr	r3, [pc, #780]	; (8007130 <UART_SetConfig+0x388>)
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d103      	bne.n	8006e2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e26:	f7fe fac1 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 8006e2a:	6778      	str	r0, [r7, #116]	; 0x74
 8006e2c:	e002      	b.n	8006e34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e2e:	f7fe faa9 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8006e32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3c:	f040 80b6 	bne.w	8006fac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e42:	461c      	mov	r4, r3
 8006e44:	f04f 0500 	mov.w	r5, #0
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	1891      	adds	r1, r2, r2
 8006e4e:	6439      	str	r1, [r7, #64]	; 0x40
 8006e50:	415b      	adcs	r3, r3
 8006e52:	647b      	str	r3, [r7, #68]	; 0x44
 8006e54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e58:	1912      	adds	r2, r2, r4
 8006e5a:	eb45 0303 	adc.w	r3, r5, r3
 8006e5e:	f04f 0000 	mov.w	r0, #0
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	00d9      	lsls	r1, r3, #3
 8006e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e6c:	00d0      	lsls	r0, r2, #3
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	1911      	adds	r1, r2, r4
 8006e74:	6639      	str	r1, [r7, #96]	; 0x60
 8006e76:	416b      	adcs	r3, r5
 8006e78:	667b      	str	r3, [r7, #100]	; 0x64
 8006e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	1891      	adds	r1, r2, r2
 8006e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e88:	415b      	adcs	r3, r3
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e94:	f7f9 ff84 	bl	8000da0 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4ba5      	ldr	r3, [pc, #660]	; (8007134 <UART_SetConfig+0x38c>)
 8006e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	011e      	lsls	r6, r3, #4
 8006ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea8:	461c      	mov	r4, r3
 8006eaa:	f04f 0500 	mov.w	r5, #0
 8006eae:	4622      	mov	r2, r4
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	1891      	adds	r1, r2, r2
 8006eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8006eb6:	415b      	adcs	r3, r3
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ebe:	1912      	adds	r2, r2, r4
 8006ec0:	eb45 0303 	adc.w	r3, r5, r3
 8006ec4:	f04f 0000 	mov.w	r0, #0
 8006ec8:	f04f 0100 	mov.w	r1, #0
 8006ecc:	00d9      	lsls	r1, r3, #3
 8006ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ed2:	00d0      	lsls	r0, r2, #3
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	1911      	adds	r1, r2, r4
 8006eda:	65b9      	str	r1, [r7, #88]	; 0x58
 8006edc:	416b      	adcs	r3, r5
 8006ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	1891      	adds	r1, r2, r2
 8006eec:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eee:	415b      	adcs	r3, r3
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ef6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006efa:	f7f9 ff51 	bl	8000da0 <__aeabi_uldivmod>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4b8c      	ldr	r3, [pc, #560]	; (8007134 <UART_SetConfig+0x38c>)
 8006f04:	fba3 1302 	umull	r1, r3, r3, r2
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	2164      	movs	r1, #100	; 0x64
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	3332      	adds	r3, #50	; 0x32
 8006f16:	4a87      	ldr	r2, [pc, #540]	; (8007134 <UART_SetConfig+0x38c>)
 8006f18:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f24:	441e      	add	r6, r3
 8006f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	1894      	adds	r4, r2, r2
 8006f34:	623c      	str	r4, [r7, #32]
 8006f36:	415b      	adcs	r3, r3
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f3e:	1812      	adds	r2, r2, r0
 8006f40:	eb41 0303 	adc.w	r3, r1, r3
 8006f44:	f04f 0400 	mov.w	r4, #0
 8006f48:	f04f 0500 	mov.w	r5, #0
 8006f4c:	00dd      	lsls	r5, r3, #3
 8006f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f52:	00d4      	lsls	r4, r2, #3
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	1814      	adds	r4, r2, r0
 8006f5a:	653c      	str	r4, [r7, #80]	; 0x50
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	1891      	adds	r1, r2, r2
 8006f6c:	61b9      	str	r1, [r7, #24]
 8006f6e:	415b      	adcs	r3, r3
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f7a:	f7f9 ff11 	bl	8000da0 <__aeabi_uldivmod>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4b6c      	ldr	r3, [pc, #432]	; (8007134 <UART_SetConfig+0x38c>)
 8006f84:	fba3 1302 	umull	r1, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	2164      	movs	r1, #100	; 0x64
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	3332      	adds	r3, #50	; 0x32
 8006f96:	4a67      	ldr	r2, [pc, #412]	; (8007134 <UART_SetConfig+0x38c>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f003 0207 	and.w	r2, r3, #7
 8006fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4432      	add	r2, r6
 8006fa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006faa:	e0b9      	b.n	8007120 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fae:	461c      	mov	r4, r3
 8006fb0:	f04f 0500 	mov.w	r5, #0
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	1891      	adds	r1, r2, r2
 8006fba:	6139      	str	r1, [r7, #16]
 8006fbc:	415b      	adcs	r3, r3
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fc4:	1912      	adds	r2, r2, r4
 8006fc6:	eb45 0303 	adc.w	r3, r5, r3
 8006fca:	f04f 0000 	mov.w	r0, #0
 8006fce:	f04f 0100 	mov.w	r1, #0
 8006fd2:	00d9      	lsls	r1, r3, #3
 8006fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fd8:	00d0      	lsls	r0, r2, #3
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	eb12 0804 	adds.w	r8, r2, r4
 8006fe2:	eb43 0905 	adc.w	r9, r3, r5
 8006fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f04f 0100 	mov.w	r1, #0
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	008b      	lsls	r3, r1, #2
 8006ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ffe:	0082      	lsls	r2, r0, #2
 8007000:	4640      	mov	r0, r8
 8007002:	4649      	mov	r1, r9
 8007004:	f7f9 fecc 	bl	8000da0 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4b49      	ldr	r3, [pc, #292]	; (8007134 <UART_SetConfig+0x38c>)
 800700e:	fba3 2302 	umull	r2, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	011e      	lsls	r6, r3, #4
 8007016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007018:	4618      	mov	r0, r3
 800701a:	f04f 0100 	mov.w	r1, #0
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	1894      	adds	r4, r2, r2
 8007024:	60bc      	str	r4, [r7, #8]
 8007026:	415b      	adcs	r3, r3
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702e:	1812      	adds	r2, r2, r0
 8007030:	eb41 0303 	adc.w	r3, r1, r3
 8007034:	f04f 0400 	mov.w	r4, #0
 8007038:	f04f 0500 	mov.w	r5, #0
 800703c:	00dd      	lsls	r5, r3, #3
 800703e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007042:	00d4      	lsls	r4, r2, #3
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	1814      	adds	r4, r2, r0
 800704a:	64bc      	str	r4, [r7, #72]	; 0x48
 800704c:	414b      	adcs	r3, r1
 800704e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4618      	mov	r0, r3
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	008b      	lsls	r3, r1, #2
 8007064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007068:	0082      	lsls	r2, r0, #2
 800706a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800706e:	f7f9 fe97 	bl	8000da0 <__aeabi_uldivmod>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <UART_SetConfig+0x38c>)
 8007078:	fba3 1302 	umull	r1, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	2164      	movs	r1, #100	; 0x64
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	3332      	adds	r3, #50	; 0x32
 800708a:	4a2a      	ldr	r2, [pc, #168]	; (8007134 <UART_SetConfig+0x38c>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007096:	441e      	add	r6, r3
 8007098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709a:	4618      	mov	r0, r3
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	1894      	adds	r4, r2, r2
 80070a6:	603c      	str	r4, [r7, #0]
 80070a8:	415b      	adcs	r3, r3
 80070aa:	607b      	str	r3, [r7, #4]
 80070ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b0:	1812      	adds	r2, r2, r0
 80070b2:	eb41 0303 	adc.w	r3, r1, r3
 80070b6:	f04f 0400 	mov.w	r4, #0
 80070ba:	f04f 0500 	mov.w	r5, #0
 80070be:	00dd      	lsls	r5, r3, #3
 80070c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070c4:	00d4      	lsls	r4, r2, #3
 80070c6:	4622      	mov	r2, r4
 80070c8:	462b      	mov	r3, r5
 80070ca:	eb12 0a00 	adds.w	sl, r2, r0
 80070ce:	eb43 0b01 	adc.w	fp, r3, r1
 80070d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f04f 0100 	mov.w	r1, #0
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	008b      	lsls	r3, r1, #2
 80070e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070ea:	0082      	lsls	r2, r0, #2
 80070ec:	4650      	mov	r0, sl
 80070ee:	4659      	mov	r1, fp
 80070f0:	f7f9 fe56 	bl	8000da0 <__aeabi_uldivmod>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <UART_SetConfig+0x38c>)
 80070fa:	fba3 1302 	umull	r1, r3, r3, r2
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2164      	movs	r1, #100	; 0x64
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	3332      	adds	r3, #50	; 0x32
 800710c:	4a09      	ldr	r2, [pc, #36]	; (8007134 <UART_SetConfig+0x38c>)
 800710e:	fba2 2303 	umull	r2, r3, r2, r3
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4432      	add	r2, r6
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	377c      	adds	r7, #124	; 0x7c
 8007124:	46bd      	mov	sp, r7
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	bf00      	nop
 800712c:	40011000 	.word	0x40011000
 8007130:	40011400 	.word	0x40011400
 8007134:	51eb851f 	.word	0x51eb851f

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 fd9a 	bl	8007c84 <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08008458 	.word	0x08008458
 8007174:	08008458 	.word	0x08008458
 8007178:	08008458 	.word	0x08008458
 800717c:	0800845c 	.word	0x0800845c

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <memset>:
 800719c:	4402      	add	r2, r0
 800719e:	4603      	mov	r3, r0
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d100      	bne.n	80071a6 <memset+0xa>
 80071a4:	4770      	bx	lr
 80071a6:	f803 1b01 	strb.w	r1, [r3], #1
 80071aa:	e7f9      	b.n	80071a0 <memset+0x4>

080071ac <sinf>:
 80071ac:	ee10 3a10 	vmov	r3, s0
 80071b0:	b507      	push	{r0, r1, r2, lr}
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <sinf+0x7c>)
 80071b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	4293      	cmp	r3, r2
 80071ba:	dc05      	bgt.n	80071c8 <sinf+0x1c>
 80071bc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800722c <sinf+0x80>
 80071c0:	2000      	movs	r0, #0
 80071c2:	f000 fc5b 	bl	8007a7c <__kernel_sinf>
 80071c6:	e004      	b.n	80071d2 <sinf+0x26>
 80071c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80071cc:	db04      	blt.n	80071d8 <sinf+0x2c>
 80071ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80071d2:	b003      	add	sp, #12
 80071d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80071d8:	4668      	mov	r0, sp
 80071da:	f000 f829 	bl	8007230 <__ieee754_rem_pio2f>
 80071de:	f000 0003 	and.w	r0, r0, #3
 80071e2:	2801      	cmp	r0, #1
 80071e4:	d008      	beq.n	80071f8 <sinf+0x4c>
 80071e6:	2802      	cmp	r0, #2
 80071e8:	d00d      	beq.n	8007206 <sinf+0x5a>
 80071ea:	b9b0      	cbnz	r0, 800721a <sinf+0x6e>
 80071ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80071f0:	ed9d 0a00 	vldr	s0, [sp]
 80071f4:	2001      	movs	r0, #1
 80071f6:	e7e4      	b.n	80071c2 <sinf+0x16>
 80071f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80071fc:	ed9d 0a00 	vldr	s0, [sp]
 8007200:	f000 f952 	bl	80074a8 <__kernel_cosf>
 8007204:	e7e5      	b.n	80071d2 <sinf+0x26>
 8007206:	eddd 0a01 	vldr	s1, [sp, #4]
 800720a:	ed9d 0a00 	vldr	s0, [sp]
 800720e:	2001      	movs	r0, #1
 8007210:	f000 fc34 	bl	8007a7c <__kernel_sinf>
 8007214:	eeb1 0a40 	vneg.f32	s0, s0
 8007218:	e7db      	b.n	80071d2 <sinf+0x26>
 800721a:	eddd 0a01 	vldr	s1, [sp, #4]
 800721e:	ed9d 0a00 	vldr	s0, [sp]
 8007222:	f000 f941 	bl	80074a8 <__kernel_cosf>
 8007226:	e7f5      	b.n	8007214 <sinf+0x68>
 8007228:	3f490fd8 	.word	0x3f490fd8
 800722c:	00000000 	.word	0x00000000

08007230 <__ieee754_rem_pio2f>:
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	ee10 6a10 	vmov	r6, s0
 8007236:	4b8e      	ldr	r3, [pc, #568]	; (8007470 <__ieee754_rem_pio2f+0x240>)
 8007238:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800723c:	429d      	cmp	r5, r3
 800723e:	b087      	sub	sp, #28
 8007240:	eef0 7a40 	vmov.f32	s15, s0
 8007244:	4604      	mov	r4, r0
 8007246:	dc05      	bgt.n	8007254 <__ieee754_rem_pio2f+0x24>
 8007248:	2300      	movs	r3, #0
 800724a:	ed80 0a00 	vstr	s0, [r0]
 800724e:	6043      	str	r3, [r0, #4]
 8007250:	2000      	movs	r0, #0
 8007252:	e01a      	b.n	800728a <__ieee754_rem_pio2f+0x5a>
 8007254:	4b87      	ldr	r3, [pc, #540]	; (8007474 <__ieee754_rem_pio2f+0x244>)
 8007256:	429d      	cmp	r5, r3
 8007258:	dc46      	bgt.n	80072e8 <__ieee754_rem_pio2f+0xb8>
 800725a:	2e00      	cmp	r6, #0
 800725c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007478 <__ieee754_rem_pio2f+0x248>
 8007260:	4b86      	ldr	r3, [pc, #536]	; (800747c <__ieee754_rem_pio2f+0x24c>)
 8007262:	f025 050f 	bic.w	r5, r5, #15
 8007266:	dd1f      	ble.n	80072a8 <__ieee754_rem_pio2f+0x78>
 8007268:	429d      	cmp	r5, r3
 800726a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800726e:	d00e      	beq.n	800728e <__ieee754_rem_pio2f+0x5e>
 8007270:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007480 <__ieee754_rem_pio2f+0x250>
 8007274:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007278:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800727c:	ed80 0a00 	vstr	s0, [r0]
 8007280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007284:	2001      	movs	r0, #1
 8007286:	edc4 7a01 	vstr	s15, [r4, #4]
 800728a:	b007      	add	sp, #28
 800728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007484 <__ieee754_rem_pio2f+0x254>
 8007292:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007488 <__ieee754_rem_pio2f+0x258>
 8007296:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800729a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800729e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072a2:	edc0 6a00 	vstr	s13, [r0]
 80072a6:	e7eb      	b.n	8007280 <__ieee754_rem_pio2f+0x50>
 80072a8:	429d      	cmp	r5, r3
 80072aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072ae:	d00e      	beq.n	80072ce <__ieee754_rem_pio2f+0x9e>
 80072b0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007480 <__ieee754_rem_pio2f+0x250>
 80072b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80072b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072bc:	ed80 0a00 	vstr	s0, [r0]
 80072c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80072cc:	e7dd      	b.n	800728a <__ieee754_rem_pio2f+0x5a>
 80072ce:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007484 <__ieee754_rem_pio2f+0x254>
 80072d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007488 <__ieee754_rem_pio2f+0x258>
 80072d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80072de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072e2:	edc0 6a00 	vstr	s13, [r0]
 80072e6:	e7eb      	b.n	80072c0 <__ieee754_rem_pio2f+0x90>
 80072e8:	4b68      	ldr	r3, [pc, #416]	; (800748c <__ieee754_rem_pio2f+0x25c>)
 80072ea:	429d      	cmp	r5, r3
 80072ec:	dc72      	bgt.n	80073d4 <__ieee754_rem_pio2f+0x1a4>
 80072ee:	f000 fc0d 	bl	8007b0c <fabsf>
 80072f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007490 <__ieee754_rem_pio2f+0x260>
 80072f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80072fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007306:	ee17 0a90 	vmov	r0, s15
 800730a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007478 <__ieee754_rem_pio2f+0x248>
 800730e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007312:	281f      	cmp	r0, #31
 8007314:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007480 <__ieee754_rem_pio2f+0x250>
 8007318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731c:	eeb1 6a47 	vneg.f32	s12, s14
 8007320:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007324:	ee16 2a90 	vmov	r2, s13
 8007328:	dc1c      	bgt.n	8007364 <__ieee754_rem_pio2f+0x134>
 800732a:	495a      	ldr	r1, [pc, #360]	; (8007494 <__ieee754_rem_pio2f+0x264>)
 800732c:	1e47      	subs	r7, r0, #1
 800732e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007332:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007336:	428b      	cmp	r3, r1
 8007338:	d014      	beq.n	8007364 <__ieee754_rem_pio2f+0x134>
 800733a:	6022      	str	r2, [r4, #0]
 800733c:	ed94 7a00 	vldr	s14, [r4]
 8007340:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007344:	2e00      	cmp	r6, #0
 8007346:	ee30 0a67 	vsub.f32	s0, s0, s15
 800734a:	ed84 0a01 	vstr	s0, [r4, #4]
 800734e:	da9c      	bge.n	800728a <__ieee754_rem_pio2f+0x5a>
 8007350:	eeb1 7a47 	vneg.f32	s14, s14
 8007354:	eeb1 0a40 	vneg.f32	s0, s0
 8007358:	ed84 7a00 	vstr	s14, [r4]
 800735c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007360:	4240      	negs	r0, r0
 8007362:	e792      	b.n	800728a <__ieee754_rem_pio2f+0x5a>
 8007364:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007368:	15eb      	asrs	r3, r5, #23
 800736a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800736e:	2d08      	cmp	r5, #8
 8007370:	dde3      	ble.n	800733a <__ieee754_rem_pio2f+0x10a>
 8007372:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007484 <__ieee754_rem_pio2f+0x254>
 8007376:	eef0 6a40 	vmov.f32	s13, s0
 800737a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800737e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007382:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007386:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007488 <__ieee754_rem_pio2f+0x258>
 800738a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800738e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007392:	eef0 7a40 	vmov.f32	s15, s0
 8007396:	ee15 2a90 	vmov	r2, s11
 800739a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800739e:	1a5b      	subs	r3, r3, r1
 80073a0:	2b19      	cmp	r3, #25
 80073a2:	dc04      	bgt.n	80073ae <__ieee754_rem_pio2f+0x17e>
 80073a4:	edc4 5a00 	vstr	s11, [r4]
 80073a8:	eeb0 0a66 	vmov.f32	s0, s13
 80073ac:	e7c6      	b.n	800733c <__ieee754_rem_pio2f+0x10c>
 80073ae:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007498 <__ieee754_rem_pio2f+0x268>
 80073b2:	eeb0 0a66 	vmov.f32	s0, s13
 80073b6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80073ba:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80073be:	eddf 6a37 	vldr	s13, [pc, #220]	; 800749c <__ieee754_rem_pio2f+0x26c>
 80073c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80073c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80073ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 80073ce:	ed84 7a00 	vstr	s14, [r4]
 80073d2:	e7b3      	b.n	800733c <__ieee754_rem_pio2f+0x10c>
 80073d4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80073d8:	db06      	blt.n	80073e8 <__ieee754_rem_pio2f+0x1b8>
 80073da:	ee70 7a40 	vsub.f32	s15, s0, s0
 80073de:	edc0 7a01 	vstr	s15, [r0, #4]
 80073e2:	edc0 7a00 	vstr	s15, [r0]
 80073e6:	e733      	b.n	8007250 <__ieee754_rem_pio2f+0x20>
 80073e8:	15ea      	asrs	r2, r5, #23
 80073ea:	3a86      	subs	r2, #134	; 0x86
 80073ec:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 80074a0 <__ieee754_rem_pio2f+0x270>
 80073fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007404:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800740c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007418:	ed8d 7a04 	vstr	s14, [sp, #16]
 800741c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	edcd 7a05 	vstr	s15, [sp, #20]
 800742c:	d11e      	bne.n	800746c <__ieee754_rem_pio2f+0x23c>
 800742e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	bf14      	ite	ne
 8007438:	2302      	movne	r3, #2
 800743a:	2301      	moveq	r3, #1
 800743c:	4919      	ldr	r1, [pc, #100]	; (80074a4 <__ieee754_rem_pio2f+0x274>)
 800743e:	9101      	str	r1, [sp, #4]
 8007440:	2102      	movs	r1, #2
 8007442:	9100      	str	r1, [sp, #0]
 8007444:	a803      	add	r0, sp, #12
 8007446:	4621      	mov	r1, r4
 8007448:	f000 f88e 	bl	8007568 <__kernel_rem_pio2f>
 800744c:	2e00      	cmp	r6, #0
 800744e:	f6bf af1c 	bge.w	800728a <__ieee754_rem_pio2f+0x5a>
 8007452:	edd4 7a00 	vldr	s15, [r4]
 8007456:	eef1 7a67 	vneg.f32	s15, s15
 800745a:	edc4 7a00 	vstr	s15, [r4]
 800745e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007462:	eef1 7a67 	vneg.f32	s15, s15
 8007466:	edc4 7a01 	vstr	s15, [r4, #4]
 800746a:	e779      	b.n	8007360 <__ieee754_rem_pio2f+0x130>
 800746c:	2303      	movs	r3, #3
 800746e:	e7e5      	b.n	800743c <__ieee754_rem_pio2f+0x20c>
 8007470:	3f490fd8 	.word	0x3f490fd8
 8007474:	4016cbe3 	.word	0x4016cbe3
 8007478:	3fc90f80 	.word	0x3fc90f80
 800747c:	3fc90fd0 	.word	0x3fc90fd0
 8007480:	37354443 	.word	0x37354443
 8007484:	37354400 	.word	0x37354400
 8007488:	2e85a308 	.word	0x2e85a308
 800748c:	43490f80 	.word	0x43490f80
 8007490:	3f22f984 	.word	0x3f22f984
 8007494:	08008080 	.word	0x08008080
 8007498:	2e85a300 	.word	0x2e85a300
 800749c:	248d3132 	.word	0x248d3132
 80074a0:	43800000 	.word	0x43800000
 80074a4:	08008100 	.word	0x08008100

080074a8 <__kernel_cosf>:
 80074a8:	ee10 3a10 	vmov	r3, s0
 80074ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80074b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80074b8:	da05      	bge.n	80074c6 <__kernel_cosf+0x1e>
 80074ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d03d      	beq.n	8007542 <__kernel_cosf+0x9a>
 80074c6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80074ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007548 <__kernel_cosf+0xa0>
 80074ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800754c <__kernel_cosf+0xa4>
 80074d2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007550 <__kernel_cosf+0xa8>
 80074d6:	4a1f      	ldr	r2, [pc, #124]	; (8007554 <__kernel_cosf+0xac>)
 80074d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80074dc:	4293      	cmp	r3, r2
 80074de:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007558 <__kernel_cosf+0xb0>
 80074e2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80074e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800755c <__kernel_cosf+0xb4>
 80074ea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80074ee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007560 <__kernel_cosf+0xb8>
 80074f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80074f6:	eeb0 7a66 	vmov.f32	s14, s13
 80074fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80074fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007502:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007506:	ee67 6a25 	vmul.f32	s13, s14, s11
 800750a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800750e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007512:	dc04      	bgt.n	800751e <__kernel_cosf+0x76>
 8007514:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007518:	ee36 0a47 	vsub.f32	s0, s12, s14
 800751c:	4770      	bx	lr
 800751e:	4a11      	ldr	r2, [pc, #68]	; (8007564 <__kernel_cosf+0xbc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	bfda      	itte	le
 8007524:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007528:	ee06 3a90 	vmovle	s13, r3
 800752c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007530:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007534:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800753c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007540:	4770      	bx	lr
 8007542:	eeb0 0a46 	vmov.f32	s0, s12
 8007546:	4770      	bx	lr
 8007548:	ad47d74e 	.word	0xad47d74e
 800754c:	310f74f6 	.word	0x310f74f6
 8007550:	3d2aaaab 	.word	0x3d2aaaab
 8007554:	3e999999 	.word	0x3e999999
 8007558:	b493f27c 	.word	0xb493f27c
 800755c:	37d00d01 	.word	0x37d00d01
 8007560:	bab60b61 	.word	0xbab60b61
 8007564:	3f480000 	.word	0x3f480000

08007568 <__kernel_rem_pio2f>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	ed2d 8b04 	vpush	{d8-d9}
 8007570:	b0d7      	sub	sp, #348	; 0x15c
 8007572:	4616      	mov	r6, r2
 8007574:	4698      	mov	r8, r3
 8007576:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007578:	4bbb      	ldr	r3, [pc, #748]	; (8007868 <__kernel_rem_pio2f+0x300>)
 800757a:	9001      	str	r0, [sp, #4]
 800757c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007580:	1d33      	adds	r3, r6, #4
 8007582:	460d      	mov	r5, r1
 8007584:	f108 39ff 	add.w	r9, r8, #4294967295
 8007588:	db29      	blt.n	80075de <__kernel_rem_pio2f+0x76>
 800758a:	1ef1      	subs	r1, r6, #3
 800758c:	bf48      	it	mi
 800758e:	1d31      	addmi	r1, r6, #4
 8007590:	10c9      	asrs	r1, r1, #3
 8007592:	1c4c      	adds	r4, r1, #1
 8007594:	00e3      	lsls	r3, r4, #3
 8007596:	9302      	str	r3, [sp, #8]
 8007598:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800759a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007878 <__kernel_rem_pio2f+0x310>
 800759e:	eba1 0009 	sub.w	r0, r1, r9
 80075a2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80075a6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80075aa:	eb07 0c09 	add.w	ip, r7, r9
 80075ae:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80075b2:	2300      	movs	r3, #0
 80075b4:	4563      	cmp	r3, ip
 80075b6:	dd14      	ble.n	80075e2 <__kernel_rem_pio2f+0x7a>
 80075b8:	ab1a      	add	r3, sp, #104	; 0x68
 80075ba:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80075be:	46cc      	mov	ip, r9
 80075c0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80075c4:	f1c8 0b01 	rsb	fp, r8, #1
 80075c8:	eb0b 020c 	add.w	r2, fp, ip
 80075cc:	4297      	cmp	r7, r2
 80075ce:	db27      	blt.n	8007620 <__kernel_rem_pio2f+0xb8>
 80075d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80075d4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007878 <__kernel_rem_pio2f+0x310>
 80075d8:	4618      	mov	r0, r3
 80075da:	2200      	movs	r2, #0
 80075dc:	e016      	b.n	800760c <__kernel_rem_pio2f+0xa4>
 80075de:	2100      	movs	r1, #0
 80075e0:	e7d7      	b.n	8007592 <__kernel_rem_pio2f+0x2a>
 80075e2:	42d8      	cmn	r0, r3
 80075e4:	bf5d      	ittte	pl
 80075e6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80075ea:	ee07 2a90 	vmovpl	s15, r2
 80075ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80075f2:	eef0 7a47 	vmovmi.f32	s15, s14
 80075f6:	ecea 7a01 	vstmia	sl!, {s15}
 80075fa:	3301      	adds	r3, #1
 80075fc:	e7da      	b.n	80075b4 <__kernel_rem_pio2f+0x4c>
 80075fe:	ecfe 6a01 	vldmia	lr!, {s13}
 8007602:	ed90 7a00 	vldr	s14, [r0]
 8007606:	eee6 7a87 	vfma.f32	s15, s13, s14
 800760a:	3201      	adds	r2, #1
 800760c:	454a      	cmp	r2, r9
 800760e:	f1a0 0004 	sub.w	r0, r0, #4
 8007612:	ddf4      	ble.n	80075fe <__kernel_rem_pio2f+0x96>
 8007614:	ecea 7a01 	vstmia	sl!, {s15}
 8007618:	3304      	adds	r3, #4
 800761a:	f10c 0c01 	add.w	ip, ip, #1
 800761e:	e7d3      	b.n	80075c8 <__kernel_rem_pio2f+0x60>
 8007620:	ab06      	add	r3, sp, #24
 8007622:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800762a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007874 <__kernel_rem_pio2f+0x30c>
 800762e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007870 <__kernel_rem_pio2f+0x308>
 8007632:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007636:	9303      	str	r3, [sp, #12]
 8007638:	46ba      	mov	sl, r7
 800763a:	ab56      	add	r3, sp, #344	; 0x158
 800763c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007640:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007644:	ab06      	add	r3, sp, #24
 8007646:	4618      	mov	r0, r3
 8007648:	4652      	mov	r2, sl
 800764a:	2a00      	cmp	r2, #0
 800764c:	dc51      	bgt.n	80076f2 <__kernel_rem_pio2f+0x18a>
 800764e:	4620      	mov	r0, r4
 8007650:	9305      	str	r3, [sp, #20]
 8007652:	f000 faa5 	bl	8007ba0 <scalbnf>
 8007656:	eeb0 8a40 	vmov.f32	s16, s0
 800765a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800765e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007662:	f000 fa5b 	bl	8007b1c <floorf>
 8007666:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800766a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800766e:	2c00      	cmp	r4, #0
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007676:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800767a:	edcd 7a00 	vstr	s15, [sp]
 800767e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007682:	dd4b      	ble.n	800771c <__kernel_rem_pio2f+0x1b4>
 8007684:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007688:	aa06      	add	r2, sp, #24
 800768a:	f1c4 0e08 	rsb	lr, r4, #8
 800768e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007692:	ee17 1a90 	vmov	r1, s15
 8007696:	fa42 f00e 	asr.w	r0, r2, lr
 800769a:	4401      	add	r1, r0
 800769c:	9100      	str	r1, [sp, #0]
 800769e:	fa00 f00e 	lsl.w	r0, r0, lr
 80076a2:	a906      	add	r1, sp, #24
 80076a4:	1a12      	subs	r2, r2, r0
 80076a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80076aa:	f1c4 0007 	rsb	r0, r4, #7
 80076ae:	fa42 fb00 	asr.w	fp, r2, r0
 80076b2:	f1bb 0f00 	cmp.w	fp, #0
 80076b6:	dd43      	ble.n	8007740 <__kernel_rem_pio2f+0x1d8>
 80076b8:	9a00      	ldr	r2, [sp, #0]
 80076ba:	f04f 0e00 	mov.w	lr, #0
 80076be:	3201      	adds	r2, #1
 80076c0:	9200      	str	r2, [sp, #0]
 80076c2:	4670      	mov	r0, lr
 80076c4:	45f2      	cmp	sl, lr
 80076c6:	dc6c      	bgt.n	80077a2 <__kernel_rem_pio2f+0x23a>
 80076c8:	2c00      	cmp	r4, #0
 80076ca:	dd04      	ble.n	80076d6 <__kernel_rem_pio2f+0x16e>
 80076cc:	2c01      	cmp	r4, #1
 80076ce:	d079      	beq.n	80077c4 <__kernel_rem_pio2f+0x25c>
 80076d0:	2c02      	cmp	r4, #2
 80076d2:	f000 8082 	beq.w	80077da <__kernel_rem_pio2f+0x272>
 80076d6:	f1bb 0f02 	cmp.w	fp, #2
 80076da:	d131      	bne.n	8007740 <__kernel_rem_pio2f+0x1d8>
 80076dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80076e4:	b360      	cbz	r0, 8007740 <__kernel_rem_pio2f+0x1d8>
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 fa5a 	bl	8007ba0 <scalbnf>
 80076ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076f0:	e026      	b.n	8007740 <__kernel_rem_pio2f+0x1d8>
 80076f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80076f6:	3a01      	subs	r2, #1
 80076f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076fc:	a942      	add	r1, sp, #264	; 0x108
 80076fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007702:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007706:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800770a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800770e:	eca0 0a01 	vstmia	r0!, {s0}
 8007712:	ed9c 0a00 	vldr	s0, [ip]
 8007716:	ee37 0a80 	vadd.f32	s0, s15, s0
 800771a:	e796      	b.n	800764a <__kernel_rem_pio2f+0xe2>
 800771c:	d107      	bne.n	800772e <__kernel_rem_pio2f+0x1c6>
 800771e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007722:	a906      	add	r1, sp, #24
 8007724:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007728:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800772c:	e7c1      	b.n	80076b2 <__kernel_rem_pio2f+0x14a>
 800772e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	da2f      	bge.n	800779c <__kernel_rem_pio2f+0x234>
 800773c:	f04f 0b00 	mov.w	fp, #0
 8007740:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	f040 8098 	bne.w	800787c <__kernel_rem_pio2f+0x314>
 800774c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007750:	469c      	mov	ip, r3
 8007752:	2200      	movs	r2, #0
 8007754:	45bc      	cmp	ip, r7
 8007756:	da48      	bge.n	80077ea <__kernel_rem_pio2f+0x282>
 8007758:	2a00      	cmp	r2, #0
 800775a:	d05f      	beq.n	800781c <__kernel_rem_pio2f+0x2b4>
 800775c:	aa06      	add	r2, sp, #24
 800775e:	3c08      	subs	r4, #8
 8007760:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007764:	2900      	cmp	r1, #0
 8007766:	d07d      	beq.n	8007864 <__kernel_rem_pio2f+0x2fc>
 8007768:	4620      	mov	r0, r4
 800776a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	f000 fa16 	bl	8007ba0 <scalbnf>
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007874 <__kernel_rem_pio2f+0x30c>
 800777a:	4619      	mov	r1, r3
 800777c:	2900      	cmp	r1, #0
 800777e:	f280 80af 	bge.w	80078e0 <__kernel_rem_pio2f+0x378>
 8007782:	4618      	mov	r0, r3
 8007784:	2400      	movs	r4, #0
 8007786:	2800      	cmp	r0, #0
 8007788:	f2c0 80d0 	blt.w	800792c <__kernel_rem_pio2f+0x3c4>
 800778c:	a942      	add	r1, sp, #264	; 0x108
 800778e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007792:	4a36      	ldr	r2, [pc, #216]	; (800786c <__kernel_rem_pio2f+0x304>)
 8007794:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007878 <__kernel_rem_pio2f+0x310>
 8007798:	2100      	movs	r1, #0
 800779a:	e0bb      	b.n	8007914 <__kernel_rem_pio2f+0x3ac>
 800779c:	f04f 0b02 	mov.w	fp, #2
 80077a0:	e78a      	b.n	80076b8 <__kernel_rem_pio2f+0x150>
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	b948      	cbnz	r0, 80077ba <__kernel_rem_pio2f+0x252>
 80077a6:	b11a      	cbz	r2, 80077b0 <__kernel_rem_pio2f+0x248>
 80077a8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f10e 0e01 	add.w	lr, lr, #1
 80077b4:	3304      	adds	r3, #4
 80077b6:	4610      	mov	r0, r2
 80077b8:	e784      	b.n	80076c4 <__kernel_rem_pio2f+0x15c>
 80077ba:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	4602      	mov	r2, r0
 80077c2:	e7f5      	b.n	80077b0 <__kernel_rem_pio2f+0x248>
 80077c4:	f10a 3cff 	add.w	ip, sl, #4294967295
 80077c8:	ab06      	add	r3, sp, #24
 80077ca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	aa06      	add	r2, sp, #24
 80077d4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80077d8:	e77d      	b.n	80076d6 <__kernel_rem_pio2f+0x16e>
 80077da:	f10a 3cff 	add.w	ip, sl, #4294967295
 80077de:	ab06      	add	r3, sp, #24
 80077e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80077e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e8:	e7f3      	b.n	80077d2 <__kernel_rem_pio2f+0x26a>
 80077ea:	a906      	add	r1, sp, #24
 80077ec:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80077f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077f4:	4302      	orrs	r2, r0
 80077f6:	e7ad      	b.n	8007754 <__kernel_rem_pio2f+0x1ec>
 80077f8:	3001      	adds	r0, #1
 80077fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077fe:	2a00      	cmp	r2, #0
 8007800:	d0fa      	beq.n	80077f8 <__kernel_rem_pio2f+0x290>
 8007802:	a91a      	add	r1, sp, #104	; 0x68
 8007804:	eb0a 0208 	add.w	r2, sl, r8
 8007808:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800780c:	f10a 0301 	add.w	r3, sl, #1
 8007810:	eb0a 0100 	add.w	r1, sl, r0
 8007814:	4299      	cmp	r1, r3
 8007816:	da04      	bge.n	8007822 <__kernel_rem_pio2f+0x2ba>
 8007818:	468a      	mov	sl, r1
 800781a:	e70e      	b.n	800763a <__kernel_rem_pio2f+0xd2>
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	2001      	movs	r0, #1
 8007820:	e7eb      	b.n	80077fa <__kernel_rem_pio2f+0x292>
 8007822:	9803      	ldr	r0, [sp, #12]
 8007824:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007828:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800782c:	9000      	str	r0, [sp, #0]
 800782e:	ee07 0a90 	vmov	s15, r0
 8007832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007836:	2000      	movs	r0, #0
 8007838:	ece2 7a01 	vstmia	r2!, {s15}
 800783c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007878 <__kernel_rem_pio2f+0x310>
 8007840:	4696      	mov	lr, r2
 8007842:	4548      	cmp	r0, r9
 8007844:	dd06      	ble.n	8007854 <__kernel_rem_pio2f+0x2ec>
 8007846:	a842      	add	r0, sp, #264	; 0x108
 8007848:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800784c:	edc0 7a00 	vstr	s15, [r0]
 8007850:	3301      	adds	r3, #1
 8007852:	e7df      	b.n	8007814 <__kernel_rem_pio2f+0x2ac>
 8007854:	ecfc 6a01 	vldmia	ip!, {s13}
 8007858:	ed3e 7a01 	vldmdb	lr!, {s14}
 800785c:	3001      	adds	r0, #1
 800785e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007862:	e7ee      	b.n	8007842 <__kernel_rem_pio2f+0x2da>
 8007864:	3b01      	subs	r3, #1
 8007866:	e779      	b.n	800775c <__kernel_rem_pio2f+0x1f4>
 8007868:	08008444 	.word	0x08008444
 800786c:	08008418 	.word	0x08008418
 8007870:	43800000 	.word	0x43800000
 8007874:	3b800000 	.word	0x3b800000
 8007878:	00000000 	.word	0x00000000
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	eeb0 0a48 	vmov.f32	s0, s16
 8007882:	1b98      	subs	r0, r3, r6
 8007884:	f000 f98c 	bl	8007ba0 <scalbnf>
 8007888:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007870 <__kernel_rem_pio2f+0x308>
 800788c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007894:	db1b      	blt.n	80078ce <__kernel_rem_pio2f+0x366>
 8007896:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007874 <__kernel_rem_pio2f+0x30c>
 800789a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800789e:	aa06      	add	r2, sp, #24
 80078a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078a4:	a906      	add	r1, sp, #24
 80078a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078aa:	3408      	adds	r4, #8
 80078ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80078b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078b8:	ee10 3a10 	vmov	r3, s0
 80078bc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80078c0:	ee17 2a90 	vmov	r2, s15
 80078c4:	f10a 0301 	add.w	r3, sl, #1
 80078c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80078cc:	e74c      	b.n	8007768 <__kernel_rem_pio2f+0x200>
 80078ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078d2:	aa06      	add	r2, sp, #24
 80078d4:	ee10 3a10 	vmov	r3, s0
 80078d8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80078dc:	4653      	mov	r3, sl
 80078de:	e743      	b.n	8007768 <__kernel_rem_pio2f+0x200>
 80078e0:	aa42      	add	r2, sp, #264	; 0x108
 80078e2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80078e6:	aa06      	add	r2, sp, #24
 80078e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80078ec:	9201      	str	r2, [sp, #4]
 80078ee:	ee07 2a90 	vmov	s15, r2
 80078f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078f6:	3901      	subs	r1, #1
 80078f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80078fc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007900:	edc0 7a00 	vstr	s15, [r0]
 8007904:	e73a      	b.n	800777c <__kernel_rem_pio2f+0x214>
 8007906:	ecf2 6a01 	vldmia	r2!, {s13}
 800790a:	ecb6 7a01 	vldmia	r6!, {s14}
 800790e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007912:	3101      	adds	r1, #1
 8007914:	42b9      	cmp	r1, r7
 8007916:	dc01      	bgt.n	800791c <__kernel_rem_pio2f+0x3b4>
 8007918:	428c      	cmp	r4, r1
 800791a:	daf4      	bge.n	8007906 <__kernel_rem_pio2f+0x39e>
 800791c:	aa56      	add	r2, sp, #344	; 0x158
 800791e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007922:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007926:	3801      	subs	r0, #1
 8007928:	3401      	adds	r4, #1
 800792a:	e72c      	b.n	8007786 <__kernel_rem_pio2f+0x21e>
 800792c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800792e:	2a02      	cmp	r2, #2
 8007930:	dc0a      	bgt.n	8007948 <__kernel_rem_pio2f+0x3e0>
 8007932:	2a00      	cmp	r2, #0
 8007934:	dc61      	bgt.n	80079fa <__kernel_rem_pio2f+0x492>
 8007936:	d03c      	beq.n	80079b2 <__kernel_rem_pio2f+0x44a>
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	f003 0007 	and.w	r0, r3, #7
 800793e:	b057      	add	sp, #348	; 0x15c
 8007940:	ecbd 8b04 	vpop	{d8-d9}
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800794a:	2a03      	cmp	r2, #3
 800794c:	d1f4      	bne.n	8007938 <__kernel_rem_pio2f+0x3d0>
 800794e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007950:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007954:	4608      	mov	r0, r1
 8007956:	461c      	mov	r4, r3
 8007958:	2c00      	cmp	r4, #0
 800795a:	f1a0 0004 	sub.w	r0, r0, #4
 800795e:	dc59      	bgt.n	8007a14 <__kernel_rem_pio2f+0x4ac>
 8007960:	4618      	mov	r0, r3
 8007962:	2801      	cmp	r0, #1
 8007964:	f1a1 0104 	sub.w	r1, r1, #4
 8007968:	dc64      	bgt.n	8007a34 <__kernel_rem_pio2f+0x4cc>
 800796a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007878 <__kernel_rem_pio2f+0x310>
 800796e:	2b01      	cmp	r3, #1
 8007970:	dc70      	bgt.n	8007a54 <__kernel_rem_pio2f+0x4ec>
 8007972:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007976:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800797a:	f1bb 0f00 	cmp.w	fp, #0
 800797e:	d172      	bne.n	8007a66 <__kernel_rem_pio2f+0x4fe>
 8007980:	edc5 6a00 	vstr	s13, [r5]
 8007984:	ed85 7a01 	vstr	s14, [r5, #4]
 8007988:	edc5 7a02 	vstr	s15, [r5, #8]
 800798c:	e7d4      	b.n	8007938 <__kernel_rem_pio2f+0x3d0>
 800798e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007990:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007994:	ed91 7a00 	vldr	s14, [r1]
 8007998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800799c:	3b01      	subs	r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	daf5      	bge.n	800798e <__kernel_rem_pio2f+0x426>
 80079a2:	f1bb 0f00 	cmp.w	fp, #0
 80079a6:	d001      	beq.n	80079ac <__kernel_rem_pio2f+0x444>
 80079a8:	eef1 7a67 	vneg.f32	s15, s15
 80079ac:	edc5 7a00 	vstr	s15, [r5]
 80079b0:	e7c2      	b.n	8007938 <__kernel_rem_pio2f+0x3d0>
 80079b2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007878 <__kernel_rem_pio2f+0x310>
 80079b6:	e7f2      	b.n	800799e <__kernel_rem_pio2f+0x436>
 80079b8:	aa2e      	add	r2, sp, #184	; 0xb8
 80079ba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80079be:	edd0 7a00 	vldr	s15, [r0]
 80079c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079c6:	3901      	subs	r1, #1
 80079c8:	2900      	cmp	r1, #0
 80079ca:	daf5      	bge.n	80079b8 <__kernel_rem_pio2f+0x450>
 80079cc:	f1bb 0f00 	cmp.w	fp, #0
 80079d0:	d017      	beq.n	8007a02 <__kernel_rem_pio2f+0x49a>
 80079d2:	eef1 7a47 	vneg.f32	s15, s14
 80079d6:	edc5 7a00 	vstr	s15, [r5]
 80079da:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80079de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079e2:	a82f      	add	r0, sp, #188	; 0xbc
 80079e4:	2101      	movs	r1, #1
 80079e6:	428b      	cmp	r3, r1
 80079e8:	da0e      	bge.n	8007a08 <__kernel_rem_pio2f+0x4a0>
 80079ea:	f1bb 0f00 	cmp.w	fp, #0
 80079ee:	d001      	beq.n	80079f4 <__kernel_rem_pio2f+0x48c>
 80079f0:	eef1 7a67 	vneg.f32	s15, s15
 80079f4:	edc5 7a01 	vstr	s15, [r5, #4]
 80079f8:	e79e      	b.n	8007938 <__kernel_rem_pio2f+0x3d0>
 80079fa:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007878 <__kernel_rem_pio2f+0x310>
 80079fe:	4619      	mov	r1, r3
 8007a00:	e7e2      	b.n	80079c8 <__kernel_rem_pio2f+0x460>
 8007a02:	eef0 7a47 	vmov.f32	s15, s14
 8007a06:	e7e6      	b.n	80079d6 <__kernel_rem_pio2f+0x46e>
 8007a08:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a12:	e7e8      	b.n	80079e6 <__kernel_rem_pio2f+0x47e>
 8007a14:	edd0 7a00 	vldr	s15, [r0]
 8007a18:	edd0 6a01 	vldr	s13, [r0, #4]
 8007a1c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a20:	3c01      	subs	r4, #1
 8007a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a26:	ed80 7a00 	vstr	s14, [r0]
 8007a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a32:	e791      	b.n	8007958 <__kernel_rem_pio2f+0x3f0>
 8007a34:	edd1 7a00 	vldr	s15, [r1]
 8007a38:	edd1 6a01 	vldr	s13, [r1, #4]
 8007a3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a40:	3801      	subs	r0, #1
 8007a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a46:	ed81 7a00 	vstr	s14, [r1]
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	edc1 7a01 	vstr	s15, [r1, #4]
 8007a52:	e786      	b.n	8007962 <__kernel_rem_pio2f+0x3fa>
 8007a54:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a56:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007a5a:	ed91 7a00 	vldr	s14, [r1]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a64:	e783      	b.n	800796e <__kernel_rem_pio2f+0x406>
 8007a66:	eef1 6a66 	vneg.f32	s13, s13
 8007a6a:	eeb1 7a47 	vneg.f32	s14, s14
 8007a6e:	edc5 6a00 	vstr	s13, [r5]
 8007a72:	ed85 7a01 	vstr	s14, [r5, #4]
 8007a76:	eef1 7a67 	vneg.f32	s15, s15
 8007a7a:	e785      	b.n	8007988 <__kernel_rem_pio2f+0x420>

08007a7c <__kernel_sinf>:
 8007a7c:	ee10 3a10 	vmov	r3, s0
 8007a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007a88:	da04      	bge.n	8007a94 <__kernel_sinf+0x18>
 8007a8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a8e:	ee17 3a90 	vmov	r3, s15
 8007a92:	b35b      	cbz	r3, 8007aec <__kernel_sinf+0x70>
 8007a94:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a98:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007af0 <__kernel_sinf+0x74>
 8007a9c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007af4 <__kernel_sinf+0x78>
 8007aa0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007aa4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007af8 <__kernel_sinf+0x7c>
 8007aa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007aac:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007afc <__kernel_sinf+0x80>
 8007ab0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007ab4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b00 <__kernel_sinf+0x84>
 8007ab8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007abc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ac0:	b930      	cbnz	r0, 8007ad0 <__kernel_sinf+0x54>
 8007ac2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007b04 <__kernel_sinf+0x88>
 8007ac6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007aca:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007ace:	4770      	bx	lr
 8007ad0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007ad4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007ad8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007adc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007ae0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b08 <__kernel_sinf+0x8c>
 8007ae4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007ae8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	2f2ec9d3 	.word	0x2f2ec9d3
 8007af4:	b2d72f34 	.word	0xb2d72f34
 8007af8:	3638ef1b 	.word	0x3638ef1b
 8007afc:	b9500d01 	.word	0xb9500d01
 8007b00:	3c088889 	.word	0x3c088889
 8007b04:	be2aaaab 	.word	0xbe2aaaab
 8007b08:	3e2aaaab 	.word	0x3e2aaaab

08007b0c <fabsf>:
 8007b0c:	ee10 3a10 	vmov	r3, s0
 8007b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b14:	ee00 3a10 	vmov	s0, r3
 8007b18:	4770      	bx	lr
	...

08007b1c <floorf>:
 8007b1c:	ee10 3a10 	vmov	r3, s0
 8007b20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007b24:	3a7f      	subs	r2, #127	; 0x7f
 8007b26:	2a16      	cmp	r2, #22
 8007b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b2c:	dc2a      	bgt.n	8007b84 <floorf+0x68>
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	da11      	bge.n	8007b56 <floorf+0x3a>
 8007b32:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007b94 <floorf+0x78>
 8007b36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b42:	dd05      	ble.n	8007b50 <floorf+0x34>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da23      	bge.n	8007b90 <floorf+0x74>
 8007b48:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <floorf+0x7c>)
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	bf18      	it	ne
 8007b4e:	4613      	movne	r3, r2
 8007b50:	ee00 3a10 	vmov	s0, r3
 8007b54:	4770      	bx	lr
 8007b56:	4911      	ldr	r1, [pc, #68]	; (8007b9c <floorf+0x80>)
 8007b58:	4111      	asrs	r1, r2
 8007b5a:	420b      	tst	r3, r1
 8007b5c:	d0fa      	beq.n	8007b54 <floorf+0x38>
 8007b5e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007b94 <floorf+0x78>
 8007b62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6e:	ddef      	ble.n	8007b50 <floorf+0x34>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfbe      	ittt	lt
 8007b74:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007b78:	fa40 f202 	asrlt.w	r2, r0, r2
 8007b7c:	189b      	addlt	r3, r3, r2
 8007b7e:	ea23 0301 	bic.w	r3, r3, r1
 8007b82:	e7e5      	b.n	8007b50 <floorf+0x34>
 8007b84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007b88:	d3e4      	bcc.n	8007b54 <floorf+0x38>
 8007b8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b8e:	4770      	bx	lr
 8007b90:	2300      	movs	r3, #0
 8007b92:	e7dd      	b.n	8007b50 <floorf+0x34>
 8007b94:	7149f2ca 	.word	0x7149f2ca
 8007b98:	bf800000 	.word	0xbf800000
 8007b9c:	007fffff 	.word	0x007fffff

08007ba0 <scalbnf>:
 8007ba0:	ee10 3a10 	vmov	r3, s0
 8007ba4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007ba8:	d025      	beq.n	8007bf6 <scalbnf+0x56>
 8007baa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007bae:	d302      	bcc.n	8007bb6 <scalbnf+0x16>
 8007bb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bb4:	4770      	bx	lr
 8007bb6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007bba:	d122      	bne.n	8007c02 <scalbnf+0x62>
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	; (8007c68 <scalbnf+0xc8>)
 8007bbe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007c6c <scalbnf+0xcc>
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bc8:	db16      	blt.n	8007bf8 <scalbnf+0x58>
 8007bca:	ee10 3a10 	vmov	r3, s0
 8007bce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007bd2:	3a19      	subs	r2, #25
 8007bd4:	4402      	add	r2, r0
 8007bd6:	2afe      	cmp	r2, #254	; 0xfe
 8007bd8:	dd15      	ble.n	8007c06 <scalbnf+0x66>
 8007bda:	ee10 3a10 	vmov	r3, s0
 8007bde:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007c70 <scalbnf+0xd0>
 8007be2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007c74 <scalbnf+0xd4>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	eeb0 7a67 	vmov.f32	s14, s15
 8007bec:	bfb8      	it	lt
 8007bee:	eef0 7a66 	vmovlt.f32	s15, s13
 8007bf2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007bf6:	4770      	bx	lr
 8007bf8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c78 <scalbnf+0xd8>
 8007bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c00:	4770      	bx	lr
 8007c02:	0dd2      	lsrs	r2, r2, #23
 8007c04:	e7e6      	b.n	8007bd4 <scalbnf+0x34>
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	dd06      	ble.n	8007c18 <scalbnf+0x78>
 8007c0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c12:	ee00 3a10 	vmov	s0, r3
 8007c16:	4770      	bx	lr
 8007c18:	f112 0f16 	cmn.w	r2, #22
 8007c1c:	da1a      	bge.n	8007c54 <scalbnf+0xb4>
 8007c1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c22:	4298      	cmp	r0, r3
 8007c24:	ee10 3a10 	vmov	r3, s0
 8007c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	dd0a      	ble.n	8007c44 <scalbnf+0xa4>
 8007c2e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007c70 <scalbnf+0xd0>
 8007c32:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007c74 <scalbnf+0xd4>
 8007c36:	eef0 7a40 	vmov.f32	s15, s0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf18      	it	ne
 8007c3e:	eeb0 0a47 	vmovne.f32	s0, s14
 8007c42:	e7db      	b.n	8007bfc <scalbnf+0x5c>
 8007c44:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007c78 <scalbnf+0xd8>
 8007c48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007c7c <scalbnf+0xdc>
 8007c4c:	eef0 7a40 	vmov.f32	s15, s0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	e7f3      	b.n	8007c3c <scalbnf+0x9c>
 8007c54:	3219      	adds	r2, #25
 8007c56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c5e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007c80 <scalbnf+0xe0>
 8007c62:	ee07 3a10 	vmov	s14, r3
 8007c66:	e7c4      	b.n	8007bf2 <scalbnf+0x52>
 8007c68:	ffff3cb0 	.word	0xffff3cb0
 8007c6c:	4c000000 	.word	0x4c000000
 8007c70:	7149f2ca 	.word	0x7149f2ca
 8007c74:	f149f2ca 	.word	0xf149f2ca
 8007c78:	0da24260 	.word	0x0da24260
 8007c7c:	8da24260 	.word	0x8da24260
 8007c80:	33000000 	.word	0x33000000

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
